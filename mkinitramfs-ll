#!/bin/bash
revision=0.3.1_p20110828

die() {
	echo "* $@"
	exit 1
}

short_help() {
	cat << EOF
   ${0##*/} [OPTIONS]
      --aufs		adds aufs[2] support to the initramfs for sqfsd (aufs2+squashfs).
  -e, --e-version=str 	optional, append str extra version after k-version to the initramfs.
  -k, --k-version=str	build an initramfs for 'k-version=\${KV:-\$(uname -r)}' kernel version.
  -f, --full		optional, build an initramfs with '--aufs --bin-dir --fs --lvm --gpg --misc'.
      --fs=<fs>		adds <fs> drivers to the initramfs, if empty will try to include 
      			{btr,j,reiser,squash,x}fs,reiser4; it's a spaces ' ' separated list.
      --fsck=<rootfs>	adds fsck.<rootfs> plus linked libraries to get fsck support for rootfs,
      			if <rootfs> is the empty string will default to ext4.
      --bin-dir=bin 	use binaries [gpg/options.skel|busybox/applets|kmap-ARCH.bin] from 'bin'.
      --comp-cmd=cmd	compression command to use to build initramfs, default is 'xz -9 --check=crc32'.
  -g, --gpg 		adds GPG support, require a static app-crypt/gnupg-1.4.x build and options.skel.
      --prefix=mvlinux	prefix scheme to name the initramfs default is kernel.
      --kmap=km-x86.bin adds 'km-x86.bin' key-map in the initramfs, full path is required.
  -l, --lvm 		adds LVM2 support, require a static sys-fs/lvm2 build.
      --misc-dir=misc use 'misc/{.gnupg/gpg.conf,share/gnupg/options.skel,initramfs-ll.conf}', optionaly 
      			one can add manpages and info files of gpg/lvm in misc/share as the whole directory 
			will be copied over into the initramfs, if the '=*' is omitted will default to './misc'.
      --splash=theme	splash theme to include in the initramfs.
  -h, --help		print this help.
  -v, --version 	print version.

  usages:
  # called without an argument, will build an initramfs for \$(uname -r) with LUKS support.

  # building with full LUKS/GPG/LVM2/AUFS2 support for kernel 3.0.3-git with an extra 'd0' string version.
  ${0##*/} -e d0 -k 3.0.3-git -f
  
  <str> 	string
  <fs> 		file system e.g. xfs, reiser4.
  <theme>	full path to splash 'theme'.
  <rootfs> 	root file sytem.
  bin		directory with the necessary binaries to build an initramfs.
  misc		second local directory with extra necessary files.
  --*-dir	bin-dirand misc-dir argument can be used without =* and will default to using ./bin and ./misc.
  --*=		all arguments will default to default value definied in \$MISC/initramfs-ll.conf if empty.
EOF
}

:	${WORKDIR:=$(pwd)}
:	${MISC:=$WORKDIR/misc}
[[ -f $MISC/initramfs-ll.conf ]] && . $MISC/initramfs-ll.conf
: 	${K_VERSION:=$(uname -r)}
:	${INITRAMFS:=/boot/${PREFIX:-kernel}-$K_VERSION$E_VERSION-ll-initrd.xz}
:	${INITDIR:=${WORKDIR}/initrd-ll$(echo $K_VERSION|cut -b4-)}
:	${BIN:=$WORKDIR/bin}
:	${CMD:=xz -9 --check=crc32}

while [[ $# > 0 ]]; do
	case $1 in
		-h|--help) short_help; exit 0;;
		-v|--version) echo "version $revision"; exit 0;;
		--aufs) iAUFS=y; shift;;
		--bin-dir*) [ -n "${1#*=}" ] && BIN=${1#*=}; shift;;
		--comp-cmd*) [ -n "${1#*=}" ] && CMD=${1#*=}; shift;;
		-e) E_VERSION=$2; shift 2;;
		--e-version=*) [ -n "${1#*=}" ] && E_VERSION=${1#*=}; shift;;
		-f|--full) iAUFS=y; iGPG=y; iLVM=y; shift;;
		--fs*)	[ -n "${1#*=}" ] && FS=kernel/fs/${1#*=}; shift;;
		--fsck*) [ -n "${1#*=}" ] && FSCK=${1#*=}; shift;;
		-g|--gpg) iGPG=y; shift;;
		--prefix*) PREFIX=${1#*=}; shift;; 
		-k) K_VERSION=$2; shift 2;;
		--k-version*) K_VERSION=${1#*=}; shift;;
		--kmap=*) [ -n "${1#*=}" ] && KEYMAP=${1#*=}; shift;;
		--lvm|-l) iLVM=y; shift;;
		--misc-dir*) [ -n "${1#*=}" ] && MISC=${1#*=}; shift;;
		--splash=*) [ -n "${1#*=}" ] && SPLASH=${1#*=}; shift;;
		*) short_help; exit 0;;
	esac
done

case ${CMD%%\ *} in
	bzip2)	INITRAMFS=${INITRAMFS/.xz/.bz2};;
	gzip) 	INITRAMFS=${INITRAMFS/.xz/.gz};;
	lzma)	INITRAMFS=${INITRAMFS/.xz/.lzma};;
	lzop)	INITRAMFS=${INITRAMFS/.xz/.lzo};;
esac

echo ">>> building $INITRAMFS..."
rm -rf $INITDIR || die "eek!"
mkdir -p $INITDIR && cd $INITDIR || die "eek!"
mkdir -p {{,s}bin,dev,etc/{modules,splash},mnt/tok,newroot,proc,root,sys,usr/{bin,sbin}} || die "eek!"
mkdir -p lib64/{splash/cache,modules/$K_VERSION/{misc,kernel/{crypto,fs/nls}}} || die "eek!"
ln -sf lib64 lib || die "eek!"

cp -a /dev/{console,mem,null,tty1,zero} dev/ || die "eek!"
cp -a $WORKDIR/init . || die "failed to copy init"
cp -a $BIN/applets etc/ || die "failed to copy applets"
cp -a /sbin/{cryptsetup,v86d} sbin/ || die "faied to copy v86d"
cp -a $BIN/busybox bin/ || die "failed to copy busybox"

for app in $(< etc/applets); do
case ${app%/*} in
	/bin) cd bin && ln -sf busybox ${app##*/} && cd .. || die "eek!";;
	/sbin) cd sbin && ln -sf ../bin/busybox ${app##*/} && cd .. || die "eek!";;
	*) ln -sf bin/busybox ${app#*/} || die "eek";;
esac
done

if [ -n "$iAUFS" ]; then
	MOD+=" kernel/fs/aufs misc/aufs.ko"
	cp -a /sbin/{,u}mount.aufs sbin/ || die "failed to copy *mount.aufs"
	echo aufs > etc/modules/sqfsd || die "eek!"
	unset iAUFS
fi

if [ -n "$iGPG" ]; then
	cp -a $BIN/gpg usr/bin/ || die "failed to copy gpg"
	cp -ar $MISC/share usr/ || die "failed to copy $MISC/share"
	cp -ar $MISC/.gnupg . || die "failed to copy $MISC/.gnupg"
	unset iGPG
fi

if [ -n "$iLVM" ]; then
	cp -a /sbin/lvm.static sbin/lvm || die "eek!"
	cd sbin
	for lpv in {vg,pv,lv}{change,create,re{move,name},s{,can}} {lv,vg}reduce lvresize vgmerge
		do ln -s lvm $lpv || die "eek!"
	done
	cd ..
	unset iLVM
fi

for mod in $FS; do
	if [ -e /lib/modules/$K_VERSION/kernel/fs/$mod ]; then
	cp -ar /lib/modules/$K_VERSION/kernel/fs/$mod lib/modules/$K_VERSION/kernel/fs/${mod%*/} || \
		die "mod copy failed"
	fi
	unset FS
done

for mod in $MOD; do
	if [ -e /lib/modules/$K_VERSION/$mod ]; then
	cp -ar /lib/modules/$K_VERSION/$mod lib/modules/$K_VERSION/${mod%/*} || die "mod copy failed"
	fi
	unset MOD
done

if [ -n "$FSCK" ]; then
	for fs in $FSCK; do
		cp -a /sbin/fsck.$fs sbin/
		for lib in $(ldd /sbin/fsck.$fs|sed -e "s:li.*=>\ ::g" -e "s:\ (.*)::g"); do
			cp -a $lib lib/ || die "failed to copy $lib library"
		done
	done
	unset FSCK
fi

for key in ${!MODULES[@]}; do
	for grp in ${MODULES[$key]}; do
		if [ -n "${grp#*=}" ]; then
			for mod in ${grp#*=}; do
				echo $mod >> etc/modules/${grp%=*}
			done
		fi
	done
	unset MODULES
done

if [ -e "$KEYMAP" ]; then 
	cp -a "$KEYMAP" etc/ || die "failed to copy keymap"
	unset KEYMAP
fi

if [ -n "$SPLASH" ]; then
	cp -ar "$SPASH" etc/splash/ || die "splash themes does not exist"
	unset SPLASH
fi

find . -print0|cpio --null -ov --format=newc|$CMD > $INITRAMFS || die "eek!"

echo ">>> $INITRAMFS initramfs built"

unset K_VERSION
unset E_VERSION
unset INITDIR
unset BIN
unset CMD
unset INITRAMFS
unset MISC
exit0

