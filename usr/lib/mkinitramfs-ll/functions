#
# $Header: mkinitramfs-ll/lib/mkinitramfs-ll/functions   Exp $
# $Author: (c) 2011-2014 -tclover <tokiclover@gmail.com> Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 0.13.6 2014/09/09 12:33:03                   Exp $
#

# @FUNCTION: arg
# EXTERNAL
# @USAGE: <var> <var> <char> <int> <opt>
# @DESCRIPTION: retrieve a value from a kernel cmdline
arg() {
	eval ${1}=$(echo "$2" | cut -d$3 -f${4:-:} $5)
}

# @FUNCTION: info
# @EXTTERNAL
# @USAGE: <srting>
# @DESCRIPTION: print message on stdout
info() {
	echo -ne "\033[1;32m * \033[0m$@\n"
}

# @FUNCTION: error
# @EXTERNAL
# @USAGE: <string>
# @DESCRIPTION: print error message on stdout
error() {
	echo -ne "\033[1;31m * \033[0m$@\n" >&2
}

# @FUNCTION: msg
# @EXTERNAL
# @USAGE: [ -e | -i ] <string>
# @DESCRIPTION: manage message sent to stdout and to splash deamon
msg() {
	local _opt _msg
	while [ $# -ge 1 ]; do
		case $1 in
			-e|-i) _opt=$1; shift;;
			--) shift;;
			*) _msg="$@"; shift $#;;
		esac
	done

	case $_opt in
		-e) error "${_msg}";;
		-i) info  "${_msg}";;
	esac

	$SPLD && debug spld_cmd "set message $_msg" && debug spld_cmd "repaint"
}

# @FUNCTION: debug
# @EXTERNAL
# @USAGE: [ -d | -e | -i ] <string>
# @DESCRIPTION: execute a command and log the command into $LOGFILE
debug() {
	local _cmd _opt _ret
	while [ $# -ge 1 ]; do
		case $1 in
			-d|-e|-i) _opt=$1; shift;;
			--) shift;;
			*) _cmd="$@"; shift $#;;
		esac
	done

	$_cmd
	_ret=$?

	echo "[$_ret]: $_cmd" >>$LOGFILE
	
	if [ ! "$_ret" ]; then
		case $_opt in
			-d) die "${_msg:-cmd: $_cmd}";;
			-e) msg -e "${_msg:-cmd: $_cmd}";;
			-i) msg -i "${_msg:-cmd: $_cmd}";;
		esac
	fi

	return "$_ret"
}

# @FUNCTION: rsh
# @EXTERNAL
# @DESCRIPTON: Rescue SHell
rsh() {
	if $SPLD; then
		debug openvt -c${CONSOLE#*tty} $sh -aim 0<$CONSOLE 1>$CONSOLE 2>&1
	elif ack setsid; then
		debug setsid $sh -aim 0<$CONSOLE 1>$CONSOLE 2>&1
	else
		debug $sh -aim 0<$CONSOLE 1>$CONSOLE 2>&1
	fi
}

# @FUNCTION: die
# @EXTERNAL
# @USAGE: <msg>
# @DESCRIPTION: drop into a rescue shell after a command failure
die() {
	local _ret=$?
	[ -n "$@" ] && msg -e "[$_ret]: $@"
	msg -i "Dropping into a rescueshell..."
	$SPLD && spld_stop
	debug rsh || debug exec $sh -aim
}

# @FUNCTION: bck
# #EXTERNAL
# @USAGE: <bin>
# @DESCRIPTION: Binary ChecK
bck() {
	debug -d which $1 1>/dev/null 2>&1
}

# @FUNCTION: ack
# @EXTERNAL
# @USAGE: [<applets>]
# @DESCRIPTION: busybox Applets ChecK
ack() {
	local _line
	if [ -f $CONFDIR/busybox.applets ]; then
		while read _line; do
			[ -h /$_line ] || ( debug -d busybox --install -s && return )
		done <$CONFDIR/busybox.applets
	else
		debug -d busybox --install -s
	fi
}

# @FUNCTION: domod
# @EXTERNAL
# @DESCRIPTION: execute a module or user script passed as arg 1
domod() {
	msg -i "exec: $sh -aex $1..."
	debug $sh -aex $1
	if [ -f /run/env ]; then
		while read line; do
			export $line
		done </run/env
		rm -f /run/env
	fi
	[ -f /run/${1##*/}.pid ] && rm -f /run/${1##*/}.pid && debug die
	exec 0<$CONSOLE 1>$CONSOLE 2>&1	
}

# @FUNCTION: _rmmod
# @EXTERNAL
# @USAGE: <kernel module(s) | module group>
# @DESCRIPTION: ReMove kernel MODules from a file liste or...
_rmmod() {
	if [ -f "$CONFDIR/$1" ]; then
		while read _mod; do 
			debug rmmod -q $_mod
		done <$CONFDIR/$1
	else
		rmmod $*
	fi
}

# @FUNCTION: _modprobe
# @EXTERNAL
# @USAGE: <kernel module(s) | module group>
# @DESCRIPTION: insert kernel MODules from a file liste or...
_modprobe() {
	if [ -f "$CONFDIR/$1" ]; then
		while read _mod; do 
			debug modprobe -q $_mod
		done <$CONFDIR/$1
	else
		modprobe $*
	fi
}

# @FUNCTION: _getopt
# @EXTERNAL
# @USAGE: <kernel cmdline>
# @DESCRIPTION: get kernel command line argument
_getopt() {
	local _arg _cmd
	for _arg in $*; do
		for _cmd in $(cat /proc/cmdline); do
			[ "${_cmd%%=*}" == "$_arg" ] && export $_cmd && break
		done
	done
}

# @FUNCTION: spld_cmd
# @EXTERNAL
# @USAGE: <splash spld_cmd>
# @DESCRIPTION: send command or message to splash deamon
spld_cmd() {
	echo "$@" >$SPLASH_FIFO
}

# @FUNCTION: spld_verbose
# @EXTERNAL
# @DESCRIPTION: set splash deamon to verbose message
spld_verbose() {
	debug chvt ${CONSOLE:8:1}
	debug spld_cmd "set mode spld_verbose"
}

# @FUNCTION: spld_silent
# @EXTERNAL
# @DESCRIPTION: set splash deamon to silent, suppresse message
spld_silent() {
	debug chvt ${CONSOLE:8:1}
	debug spld_cmd "set mode silent"
}

# @FUNCTION: spld_stop
# @EXTERNAL
# @DESCRIPTION: stop splash deamon
spld_stop() {
	$SPLD && SPLD=false || return
	debug spld_cmd "exit"
	export CONSOLE=/dev/console
	exec 0<$CONSOLE 1>$CONSOLE 2>&1
}

# @VARIABLE: BOOT_MSG
# @EXTERNAL
# @DESCRIPTION: splash boot message

# @VARIABLE: SPLASH_FIFO
# @EXTERAL
# @DESCRIPTION: splash fifo file

# @VARIABLE: cachedir
# @EXTERNAL
# @DESCRIPTION: splash cache dir

# @FUNCTION: shread
# @EXTERNAL
# @USAGE: <var>
# @DESCRIPTION: read line from stdin and drop to rescue shell if a word match
shread() {
	read _asw
	case $_asw in
		sh|SH|shell|SHELL|rsh|RSH) die;;
	esac
}

# @FUNCTION: blk
# @EXTERNAL
# @USAGE: <block device node | (part of) uuid | (part of) label>
# @DESCRIPTION: get BLocK device
blk() {
	local _asw _blk=$(blkid | grep "$1" | cut -d: -f1)
	
	if [ ! -b "$_blk" ]; then
		msg -i "Insert $1 block device and press Enter"
		_blk=$(blkid | grep "$1" | cut -d: -f1)
		sleep 1

		while [ ! -b "$_blk" ]; do
			msg -i "Type in a valid block device e.g. \
				[ sda5 | UUID=<uuid> | LABEL=<label> ]"
			shread _asw
			sleep 1
			_blk=$(blkid | grep "${_asw:-1}" | cut -d: -f1)
			[ -n "$_blk" ] && [ -b "$_blk" ] && break
		done
	fi

	eval ${2:-BLK}=$_blk
}

# @VARIABLE: LBD
# @DESCRIPTION: Loop Back Device holder for ldk key mode, to be cleaned

# @VARIABLE: LBK
# @DESCRIPTION: Loop Back device Key holder for ldk key mode, like above,
# to be cleaned

# @FUNCTION: ldk
# @EXTERNAL
# @USAGE: </path/to/file> plus a mapping indirectly given by <_fn>
# @DESCRIPTION: decrypt dm-crypt LUKS Device Key file
ldk() {
	[ -b "$1" ] && return

	if [ ! "$CLD" ]; then
		local _ld="$(debug -d losetup -f)"
		debug -d losetup "$_ld" "$1"
		LBD="$_ld:$LBD"
	else
		local _ld="$1"
	fi

	debug cryptsetup luksOpen "$_ld" "$_fn" && LBK="$_fn:$LBK"
}

# @VARIABLE: CLD
# @DESCRIPTION: an auto seted variable if >=cryptsetup-1.3 manage automaticaly
# Loop Back Device

# @FUNCTION: stk
# @EXTERNAL
# @USAGE: <mode:dev:/path/to/file>
# @DESCRIPTION: SeT Key [file] mode for decryptiong
stk() {
	local _fp _fn _kd _km
	arg "_fp" "$1" ":" "3" "-s"
	arg "_kd" "$1" ":" "2" "-s"
	arg "_km" "$1" ":" "1"
	_fn=${_fp##*/}

	if [ -z "$_km" ];then
		export KEYMODE=none
		return
	elif [ "$_km" = "ldk" ] && [ -z "$CLD" ];then
		[ $(cryptsetup --version | awk '{print $2}' | cut -d'.' -f2) -ge 3 ] &&
		CLD=true
	fi

	if [ "$_km" != "pwd" ]; then
		[ -n "$_kd" ] || die "device field empty"
		[ -n "$_fp" ] || die "file path field empty"

		if [ -z "$(grep $MNTDIR /proc/mounts)" ]; then
			[ -b "$_kd" ] || blk "$_kd" "_kd"
			debug -d mount -n -r "$_kd" $MNTDIR
		fi
		debug -d test -f "$MNTDIR/$_fp"
	fi

	case $_km in
		gpg) $ECK && debug -d bck gpg
			export KEYFILE="$MNTDIR/$_fp" KEYMODE=gpg
			;;
		reg) export KEYFILE="$MNTDIR/$_fp" KEYMODE=reg
			;;
		ldk) ldk "$MNTDIR/$_fp"
			export KEYFILE="/dev/mapper/$_fn" KEYMODE=ldk
			;;
		pwd) export KEYMODE=pwd
			;;
		*) die "$_km: invalid key mode"
			;;
	esac
}

# @FUNCTION: bkd
# @EXTERNAL
# @USAGE: <dev> <key> [<BKD>] [<group>]
# @DESCRIPTION: get BlocK Device (dm|md-raid, dm-crypt, lvm)
bkd() {
	debug -d test -n "$1"
	[ -n "$3" ] && debug -d stk "$4"

	local _bkd _dev _grp="$3" _ilvm _iraid _sig _typ

	if [ "$_grp" = "1" ]; then
		arg "_dev" "$1" ":" "1"
	else
		_cut=-s
		arg "_typ" "$1" ":" "1" "$_cut"
		arg "_dev" "$1" ":" "2" "$_cut"
		arg "_sig" "$1" ":" "3" "$_cut"
	fi

	[ -n "$iraid" ] && debug arg "_raid" "$iraid" "," "$_grp" "$_cut"
	[ -n "$ilvm"  ] && debug arg "_lvm" "$ilvm" "," "$_grp" "$_cut"
	
	[ -n "$_raid" ] && debug -d mdopen "$_raid" "_bkd"
	[ -n "$_lvm" ]  && debug -d lvopen "$_dev" "$_lvm" "_bkd"

	[ "$KEYMODE" != "none" ] && debug -d dmopen "$_dev" "_bkd" ||
		debug -d blk "$_dev" "_bkd"

	eval ${2:-BKD}=${_typ:+$_typ:}$_bkd${_sig:+:$_sig}
}

# @FUNCTION: dmclose
# @EXTERNAL
# @USAGE: <mapping>
# @DESCRIPTION: close dm-crypt mapping (colon separated list)
dmclose() {
	local IFS="${IFS}:" 
	for _p in $@; do 
		debug cryptsetup remove ${_p%-*}
	done
}

# @FUNCTION: dmcrypt
# @EXTERNAL
# @USAGE: <dev> <var>
# @DESCRIPTION: get DM-Crypt LUKS block device or detached header
dmcrypt() {
	local _asw _ldh=$1
	while ! debug cryptsetup $_arg "$_ldh"; do
		msg -i "Type in a valid cyphertext device e.g. \
			[ sda5 | UUID=<uuid> | LABEL=<label> ], or avalid detached header"
		shread _asw
		debug blk "${_asw:-$1}" "_ldh"
	done

	eval ${2:-DMC}=$_ldh
}

# @FUNCTIOON: dmopen
# @EXTERNAL
# @USAGE: <map-dev+header>
# @DESCRIPTION: open dm-crypt LUKS block device
dmopen() {
	$ECK && debug -d bck cryptsetup
	debug _modprobe dm-crypt

	local _arg=isLuks _ctx _dev _hdr _header
	arg "_map" "$1" "-" "1"
	arg "_hdr" "$1" "+" "2" "-s"
	blk "$(echo "$1" | cut -d'-' -f2 -s | cut -d'+' -f1)" "_dev"

	_ctx=/dev/mapper/$_map
	[ -b "$_ctx" ] && eval ${2:-CTX}=$_ctx && return

	if [ -n "$_hdr" ]; then
		if [ -n "$(echo "$_hdr" | grep -E '(UUID|LABEL|sd[a-z])')" ]; then 
			blk "$_hdr" "_hdr"
			debug dmcrypt "$_hdr" "_header"
		elif [ -e "$MNTDIR/$_hdr" ]; then
			debug dmcrypt "$MNTDIR/$_hdr" "_header"
		else
			die "header not found"
		fi
		_header="--header $_header"
	else
		debug dmcrypt "$_dev" "_dev"
	fi

	_arg="luksOpen $_dev $_map $_header"

	if [ "$KEYMODE" = "gpg" ]; then 
		mv /dev/tty /dev/bak && cp -a /dev/console /dev/tty
		for _i in 1 2 3; do
			gpg -qd "$KEYFILE" | cryptsetup $_arg && break
			echo "[$?]: gpg -qd "$KEYFILE" | cryptsetup $_arg" >>$LOGFILE
		done
		rm /dev/tty && mv -f /dev/bak /dev/tty
	elif [ "$KEYMODE" = "ldk" ] || [ "$KEYMODE" = "reg" ]; then
		debug cryptsetup $_arg -d "$KEYFILE"
	fi

	[ -b "$_ctx" ] || debug -d cryptsetup $_arg
	debug -d test -b $_ctx && eval ${2:-CTX}=$_ctx
}

# @FUNCTION: lvopen
# @EXTERNAL
# @USAGE: <vg-lv> [<map-crypted_pv>]
# @DESCRIPTION: open LVM Logical Volume
lvopen() {
	$ECK && debug -d bck lvm
	debug _modprobe device-mapper
	local _lv=${1/-//}

	if ! debug lvchange -ay $_lv; then
		if [ -n "$2" ] && [ "$KEYMODE" != "none" ]; then
			local _pv="$2" IFS="${IFS}:"
			[ -f "$MNTDIR/$_pv" ] && _pv="$(cat $MNTDIR/$_pv)"
			for _p in $_pv; do
				debug dmopen "$_p"
			done
			debug vgchange -ay ${1%-*} || debug -d dmclose "$_pv"
		else
			die "no logical volume found"
		fi
	fi

	if [ -b "/dev/mapper/$1" ]; then
		eval ${3-LV}=/dev/mapper/$1
	elif [ -b "/dev/$_lv" ]; then
		eval ${3-LV}=/dev/$_lv
	else
		die "$_lv VG/LV not found"
	fi
}

# @FUNCTION: mdopen
# @EXTERNAL
# @USAGE: <mdn-opt>
# @DESCRIPTION: open md-raid block device
mdopen() {
	local _dev _conf _opt _set _uuid
	arg "_dev" "$1" "+" "1"
	arg "_opt" "$1" "+" "2" "-s"
	[ -n "$(echo "$_opt" | grep -i uuid)" ] && _uuid=$_opt

	if [ -n "$_uuid" ] || [ -n "$(echo "$_opt" | grep -E '^(\[|[0-9])')" ]; then
		[ -n "$(echo $_dev | grep dev)" ] || _dev=/dev/$_dev
		[ -b "$_dev" ] && return
		$ECK && debug -d bck mdadm
		debug _modprobe raid
	
		if [ -n "$_uuid" ]; then
			echo ARRAY $_dev $_uuid >>/etc/mdadm.conf
		else
			echo ARRAY $_dev devices=/dev/sd*${_opt:-*} >>/etc/mdadm.conf
		fi
		
		_conf=-c/etc/mdadm.conf
		debug -d mdadm --assemble ${_uuid:+-u${_uuid#*=}} $_conf $_dev
	else
		$ECK && debug -d bck dmraid
		debug _modprobe dm-raid
		_dev=$(dmraid -r | grep "$_dev" | cut -d: -f1)
		[ -b "$_dev" ] && return

		for _f in $(echo "$_opt" | sed 's/:/ /g'); do
			_set+=" $(dmraid -s -c $_f)"
		done
		
		for _s in ${_dev##*/} $_set; do
			debug -d dmraid -ay -i -I $_s
		done
	fi

	debug -d test -b $_dev
	eval ${2:-MD}=$_dev
}

# @FUNCTION: squashd
# @EXTERNAL
# @USAGE: indirectly given by isquashd cmdline arg and/or SQUASHD, SQUASHDIR variables
# @DESCRIPTION: mount squashed, AUFS+squashfs, directories
squashd() {
	[ "${isquashd%,*}" = "y" ] || SQUASHDIR="${isquashd%,*}"
	if [ "${isquashd#*,}" = "y" ]; then :;
	elif [ "$(echo ${isquashd#*,}|cut -d: -f1)" = "a" ]; then
		SQUASHD="${SQUASHD}:$(echo ${isquashd#*,} | cut -c3-)"
	else
		SQUASHD="$(echo ${isquashd#*,} | cut -c3-)"
	fi

	debug -d test -d $NEWROOT/$SQUASHDIR
	debug _modprobe squashd
	cd $NEWROOT

	local IFS="${IFS}:" _base _dir _n=/dev/null
	for _dir in $SQUASHD; do
		_base=/"$SQUASHDIR"/$_dir
		_base=$(echo $_base | sed -e 's,//,/,g')
		_dir=$( echo /$_dir | sed -e 's,//,/,g')
		debug -d test -f $_base.squashfs
		debug mkdir -p -m 0755 .$_base/rw .$_base/rr .$_dir
		if ! grep aufs:$_dir /proc/mounts >$_n 2>&1; then
			if ! grep $_base/rr /proc/mounts >$_n 2>&1; then
				debug -d mount -t squashfs -o nodev,loop,ro .$_base.squashfs .$_base/rr ||
				continue
			fi
			mount -t aufs -o nodev,udba=reval,br:.$_base/rw:.$_base/rr aufs:$_dir .$_dir
		fi
	done
}

# @FUNCTION: fmount
# @EXTERNAL
# @UAGE: </usr:/var:...>
# @DESCRIPTION: mount /usr:... using embeded /etc/fstab before switching root
fmount() {
	local _fs _dev _mpt _opt _x _y _z IFS="${IFS}:"
	[ -f $NEWROOT/etc/fstab ] || die "mnt: no /etc/fstab file found"
	for _x in $imount; do
		_y="$(grep $_x $NEWROOT/etc/fstab)"
		if [ -n "${y}" ]; then
			 _fs=$(echo "$_y" | awk '{print $3}')
			_dev=$(echo "$_y" | awk '{print $1}')
			_mpt=$(echo "$_y" | awk '{print $2}')
			_opt=$(echo "$_y" | awk '{print $4}')
		else
			msg -e "mnt: $_x not found in /etc/fstab"
			break
		fi
		blk "$_dev" "_dev"
		debug -d test -b $_dev
		[ -d $NEWROOT/$_mpt ] || mkdir -p $NEWROOT/$_mpt
		debug -d mount -t$_fs ${_opt:+-o$_opt} $_dev $NEWROOT/$_mpt
	done
}

# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
