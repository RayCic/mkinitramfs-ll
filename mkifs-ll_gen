#!/bin/bash
# $Id: mkinitramfs-ll/mkifs-ll_gen[.bash],v 0.4.1 2011/12/05 -tclover Exp $

usage() {
  cat <<-EOF
  usage: ${0##*/} OPTIONS [OPTIONS...]
  -a|--all              short forme/hand of '-sqfsd -lvm -gpg -toi'
  -D|--build            build a static busybox and GnuPG-1.x binaries
  -f|--font :<font>     append collon seperated list of fonts to in include
  -e|--ev d             append an extra 'd' version after \$kv to the initramfs image
  -k|--kv 3.1.4-git     build an initramfs for '3.1.4-git' kernel, else for \$(uname -r)
  -c|--comp             compression command to use to build initramfs, default is 'xz -9..'
  -g|--gpg              adds GnuPG support, require a static gnupg-1.4.x and 'options.skel'
  -p|--prefix vmlinuz.  prefix scheme to name the initramfs image default is 'initrd-'
  -y|--keymap kmx86.bin append collon seperated list of keymaps to include in the initramfs
  -l|--lvm              adds LVM2 support, require a static sys-fs/lvm2[lvm.static] binary
  -B|--bindir bin       try to include binaries from bin dir (busybox/applets/gpg) first
  -M|--miscdir misc     use msc dir for {.gnupg/gpg.conf,share/gnupg/options.skel} files,
                        one can add manpages gpg/lvm/cryptsetup and user scripts as well
  -W|--wokdir dir       working directory where to create initramfs dir, default is PWD
  -b|--bin :<bin>       append collon seperated list of binar-y-ies to include
  -C|--confdir dir      copy gpg.conf, GnuPG configuration file, from dir
  -m|--modep :<mod>     collon seperated list of kernel module-s to include
  -S|--splash :<theme>  collon ':' separated list of splash themes to include
     --mgpg :<mod>      collon seperated list of kernel modules to add to gpg group
     --mboot :<mod>     collon seperated list of kernel modules to add to boot group
     --msqfsd :<mod>    collon seperated list of kernel modules to add to sqfsd group
     --mremdev :<mod>   collon seperated list of kernel modules to add to remdev group
     --mtuxonice :<mod> collon seperated list of kernel modules to add to tuxonice group
  -t|--toi              adds tuxonice support for splash, require tuxoniceui_text binary
  -s|--sqfsd            add aufs(+squashfs modules +{,u}mount.aufs binaries) support
  -i|--install	        install busybox with symliks to \$opts[-bindir], require -b
  -n|--minimal	        build busybox with minimal applets, default is full applets
  -U|--ucl-arch i386    ARCH string needed to build busybox linked uClibc
  -Y|--key-map <k:m>    generate <m> keymap using <k> as input keymap
  -u|-usage            print this help/usage and exit

  usage: runned without arguments, build an initramfs for kernel \$(uname -r)
  # build an initramfs after building gnupg/busybox (AUFS2/LVM2/GPG support)
  ${0##*/} --build-all --aufs --lvm
EOF
}

opt=$(getopt -o ab:c:e:fgk:lm:stuvy:B:M:S:W: --long all,bin:,bindir:comp:,ev:,font:,keymap: \
	  --long gpg:,mboot:,mdep:,mgpg:msqfsd:,mremdev:,mtuxonice,sqfsd,toi,usage,version \
	  --long lvm,miscdir:,workdir:,kv:,build,confdir:,minimal,key-map:,ucl-arch \
	  -o nDC:U:Y: -n ${0##*/} -- "$@" || usage && exit 0)
eval set -- "$opt"
[[ -z "${opts[*]}" ]] && declare -A opts
while [[ $# > 0 ]]; do
	case $1 in
		-u|--usage) usage; exit 0;;
		-a|--all) opts[sqfsd]=y; opts[gpg]=y; opts[lvm]=y; opts[toi]=y; shift;;
		-D|--build) opts[build]=y; shift 2;;
		-s|--sqfsd) opts[sqfsd]=y; shift;;
		-b|--bin) opts[bin]+=:${2}; shift 2;;
		-c|--comp) opts[comp]="${2}"; shift 2;;
		-C|--confdir) opts[confdir]="${2}"; shift 2;;
		-B|--bindir) opts[bindir]=${2}; shift 2;;
		-e|--ev) opts[ev]=${2}; shift 2;;
		-k|--kv) opts[kv]=${2}; shift 2;;
		-f|--font) opts[font]+=":${2}"; shift 2;;
		-m|--mdep) opts[mdep]+=":${2}"; shift 2;;
		-i|--intsall) opts[install]=y; shift 2;;
		-n|--minimal) opts[minimal]=y; shift 2;;
		-g|--gpg) opts[gpg]=y; shift;;
		-p|--prefix) opts[prefix]=${2}; shift 2;;
		-l|--lvm) opts[lvm]=y; shift;;
		--mboot) opts[mboot]+=:${2}; shift 2;;
		--mgpg) opts[mgpg]+=:${2}; shift 2;;
		--msqfsd) opts[msqfsd]+=:${2}; shift 2;;
		--mremdev) opts[mremdev]+=:${2}; shift 2;;
		--mtuxonice) opts[tuxonice]+=:${2}; shift 2;;
		-M|--miscdir) opts[miscdir]="${2}"; shift 2;;
		-S|--splash) opts[splash]+=":${2}"; shift 2;;
		-W|--workdir) opts[workdir]="${2}"; shift 2;;
		-U|--ucl-arch) opts[ucl-arch]=${2}; shift 2;;
		-Y|--key-map) opts[key-map]="${2}"; shift 2;;
		--) shift; break;;
	esac
done

[[ -n "${opts[workdir]}" ]] || opts[workdir]="$(pwd)"
[[ -n "${opts[miscdir]}" ]] || opts[miscdir]="${opts[workdir]}"/misc
[[ -n "${opts[bindir]}" ]] || opts[bindir]="${opts[workdir]}"/bin
[[ -f ./mkifs-ll.conf ]] && source ./mkifs-ll.conf
mkdir -p "${opts[workdir]}"
mkdir -p "${opts[bindir]}"

error() { echo -ne "\e[1;31m* \e[0m$@\n"; }
die()   { error "$@"; exit 1; }

[[ -n "${opts[build]}" ]] && { ./mkifs-ll_bb
	[[ -n "${opts[gpg]}" ]] && { ./mkifs-ll_gpg
		[[ -d "${opts[confdir]}" ]] && { mkdir -p "${opts[miscdir]}"/.gnupg/
			cp "${opts[confdir]}"/gpg.conf "${opts[miscdir]}"/.gnupg/ || die "eek!"
		}
	}
}

./mkifs-ll

# vim:fenc=utf-8:ci:pi:sts=0:sw=4:ts=4:
