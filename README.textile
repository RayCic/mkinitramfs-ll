@$Header: mkinitramfs-ll/README.textile,v 0.9.8 2012/07/06 10:20:20 -tclover Exp $@

bq. "initramfs with *optional RAID|LUKS|LVM|TOI|AUFS+SQUASHFS* support [with a handfull zsh and or bash set of scripts]"

*WARNING: USE AT YOUR OWN RISK!*

h3. 1. Getting an intramfs ready

If you have a static busybox binary or if you use Gentoo [you have already one: installed as /bin/bb] 
you can make an initramfs in matter of secondes with locales settings: keymap and consolefont (in addition to 
media-fonts/terminus-font if you use the associated "ebuild":https://github.com/tokiclover/bar-overlay, or else if you have that package installed).

If you want GnuPG support, yo should have an app-crypt/gnupg-1.4*[static] binary along with its 
options.skel file. Or if you run Gentoo you can run either gnupg.{ba,z}sh to generate one. 
@gnupg.zsh -W/usr/local/share/mkinitramfs-ll@ if you installed the package or simply @gnupg.zsh@
will build a binary in the current directory (with a usr/bin/gpg and usr/share/gnupg/options.skel).

And then run @mkinitramfs-ll.zsh -font -keymap -gpg@ or the bash counterpart @mkinitramfs-ll.bash --font --keymap --gpg@

Gentoo users can build everything with: @autogen.zsh -all -font -keymap@ or @autogen.bash --all --font --keymap@

Of course, one can append extra fonts and keymaps with @-f ter-g12n -y fr-latin1@ etc. 
and the @-a@ option depend on @mkinitramfs-ll.conf@ so one can put many default values there.

One can get more info on the scripts by running @$script -u@

h3. 2. _Optional_ kernel cmdline option or arguments

*_Only_* @iroot@ _is required_ else nothing will happen but, maybe, a kernel panic. 
And of course when using this script, one does not need @root=<arg>@ nor @resume=<arg>@ etc. options.

init script supports the following specific arguments: 

* @iroot=<PV|VG-LV>[:c:<fs>]@    -> required root device, recommanded optional @:c:ext4@ 

*Note*: @:n:ext4@ or @:no:ext4@ will disable a die if fsck fails to check rootfs.

* @imopt=<ro,inode64,...>@       -> optional mount options for rootfs.
* @imount=</usr:/var:...>@       -> mount /usr:/var using /etc/fstab

*Note*:@imount@ can be used to mount /usr:/var ... using @/etc/fstab@. Nothing more is required if unencrypted. 
However, if using LVM and/or LUKS and/or RAID array, one should ensure that the underlaying PVs are available 
after swp(), resume() and rootfs() being executed, meaning that, the volume(s) should be either in one group. 

* @imod=<drm,ttm,...,nouveau>@   -> optional modules [list] to load (in the boot group).
* @ikmap=<kmap>[:<font>]@        -> optional keymap and font to load, may be handy for passwords.
* @ishrl=<n>|:<n>@               -> interrupt init and drop to n level or pass n to real init (see EOF)
* @rescue|rescueshell@           -> drops directly into a minimal shell.

*Note*: now with >=init-0.8.2 one can @exit@ the rescue shell after having finished to fix a issue
which caused a @die@, or simply after a @rescue[shell]@ on kernel cmdline and the init will resume
booting from there.

* @ilvm=<map-PV>,...,<map-PV>@   -> LVM argument @<mapping-PV>@ is collon ':' separated 
list of PVs of a VG; and comma ',' separated list of VG: 1st for root, 2nd for swap and 
the 3rd for resume, hence one can append enough commas to asign a particular group.
* @iraid=mdN[-UUID=<uuid>+<N>]@  -> comma separated list of arrays for root, swap and resume.
* @iswap=<type>:<VG-LV>[:signature]@       -> e.g. @iswap=swap:sda2@ for a swap device.
* @iresume=<type>:<VG-LV>[:signature]@     -> e.g. @iresume=file:<VG-LV>:0x4400@ for a swapfile.
* @ikroot=<mode>:<device>:</path/to/file>@ -> ikroot for root keyfile or password.
* @ikswap=<mode>:<device>:</path/to/file>@ -> iswap for swap keyfile or password.
* @ikresume=<mode>:<device>:</path/to/key/file>@ -> same as above but for [i]resume.
* @isqfsd=y[|/sqfsdir],y[|[n|a]:<dir>]@    -> squashed directories, see below for more info.    
* @dmesg=emerg|alert|crit|err|..|debug@    -> optional dmesg log level priority.

init script accept @single@ argument and will append single runlevel to real init, no special care 
for @ro|rw@ because it can be appended as @imopt=ro@, @rw@ mode is the default behavior, for example.
It also support @splash=silent,fadein,theme:emergence console=[/dev/]tty1@ splash cmdline arguments.

h3. 3. About device, /dev/ prefix and detached LUKS header

There's no need to provide any @/dev/@ prefix for block devices, _blkid() will take care of it.
Now one can use @UUID=<uuid>@ or @LABEL=<label>@ instead of @[/dev/]sd[a-z0-9]@ for any device or PV. 
However, a leading plus @+@ is used as a separator for detached header device|file when using 

*LUKS*: @<map-UUID=<uid>[|LABEL=<label>][+[/dev/]sd*]|</path/to/header/file>]@

Each encrypted PV, with a detached header is given like:

* @<[/dev/]sda6+[/dev/]sdc>@ for a detached header to @/dev/sdc@ device [passed as @--header /dev/sdc@]
* @</path/to/header/file>@ for a detached header file @[--header /mnt/tok/path/to/header/file]@ 

so in this case, the header file must be in the same removable device or @/boot@ PV used for 
keyfiles [because it'll be too troublesome to make it otherwise]. Of course, a detached header to a device 
should use an UUID or a LABEL instead of @[/dev/]sd[a-z0-9]@ to avoid header mismatch!

h3. About RAID array

*Note*: raid array can be used as the underlaying pyshical device of unencrypted or not with LVM on top.

iraid argument can take up to 3 comma separated list of RAID arrays: the 1st for root, 2nd for swap
and the 3rd for resume. Each argument is of  the forme @<array>+UUID=<uuid>[|<format>]@. @<format>@ is a
metadata format used to scan dmraid set and subset software (ata)raid.

Either way, one can use mdadm software raid like @iraid=md<n>+UUID=<uuid>@ and optionaly embed or not an config
file @/etc/mdadm.conf@. Or else, @iraid@ is sufficient to enable arrays: 
@echo ARRAY <array> <uuid> >> /etc/mdadm.conf@.

Or else, an optional @<format>@ can be used to enable mdraid software (ata)raid e.g. @asr|..|isw|jmicron|..|dos@
see @mdraid -l@. dmraid software raid can be passed like @iraid=<array>+isw:dos@, ':' as a metadata seperator.

h3. 4. About LVM argument

Actually a PV in a group, respectively root, swap, resume is given by @<mapping>-<device>@, 
mapping being a mapping name for cryptsetup and a block device|partition without the @/dev/@ prefix.

* LV, PV, VG: Logical Volume, Physical Volume, Volume Group.
* @map-PV@: colon separated list @<mapping-PV>@ e.g. @<pv1-sda1:pv2-sdb1:...>@ for a Volume Group,
the 1st being for root, the 2nd for swap and the 3rd for resume;
so this @ilvm=,swp-sdc1,@ asign a VG for swap VG only.

*NOTE*: for unencrypted PVs, there's no need to provide a list of PVs in ilvm argument. A single 
character or word is enough to activate LVM like @ilvm=y@ for root.

* PV list: now @<map-PV>@ [list] can be replaced with @</path/to/list>@ file, this require the 
use of keyfile to decrypt PV, which means that a removable media or @/boot@ device is mounted. 
List can be a line separated list insted of a collon @:@ list of the forme 
@<mapping-UUID=<uid>[+UUID=<uuid>]@ for an UUID list. One can mix UUID, LABEL and [h|s]d??* 
in a list. However, it's best to use UUID only for detached header from cyphertext device which 
prevent header mismatch. One can use multiple lists up to three, one for each group.

h3. 4. About mount options: @imopt=<rootfs mount options>@

Say, you have a @rootfs=xfs[|jsf|reiser|ext*]@ and want to mount your rootfs with specific opts. 
In case of xfs, for exemple, just create your log LV on a different PV than what you're logging 
from and everything is set up--well if the logging LV is in the swap VG--and, in fact, you do 
not need a swap LV there--you just use that VG as if there were one. 

h3. 5. About supported keyfile/password modes

For partitions or PVs that are encrypted with a key, setting @ikroot@ and/or @ikswap@ and/or 
@ikresume@ is required, otherwise a passphrase is required for _each_ PV as a fall back.

* @<mode>@: defines how the init script shall treat the supplied keyfile (see below). 

** @gpg@  -> keyfile is GnuPG-protected
** @ldk@  -> keyfile is LUKS encrypted, via loop back device.
** @reg@  -> keyfile is regular file
** @pwd@  -> encrypted on a regular passphrase, if no argument is passed, fallback is pwd mode.
** @none@ -> handy for unencrypted PVs, with or without LVM2 support.

* @<device|dev>@ is a device or PV that will be assigned to the removable media e.g. sd[a-z][0-9]
* @</path/to/file>@ is a full path to file inside the removable media.

*Notes on key modes*

* @gpg@   : GnuPG encrypted keyfile support only gnupg-1.4*, passed as @gpg -qd /path/to/keyfile |@ 
one can add a @/.gnupg/gpg.conf@ in the initramfs root to avoid its creattion on each boot 
* @ldk@   : encrypted keyfile passed to cryptsetup as @-d /dev/mapper/$(basename /path/to/keyfile)@ after decryption 
* @reg@   : regular keyfile passed to cryptsetup as @-d /path/to/keyfile@
* @pwd@   : regular passphrase: it's not mandatory to append any @ikroot[|swap|resume]=pwd@ (fallback keymode)
* @none@  : unencrypted Physical Volume or device which should be explicitely appended 
	
h3. 6. About squashed directories 

One can use squashfs+aufs to squash directories like @$PORTDIR:var/lib/layamn@, or system related directories 
like @usr:lib32:lib64:bin:sbin@. Advantages are system speed, responsiveness and very small disk size footprint.

Squashed directories argument:
* @isqfsd=y[|/sqfsdir],y[|[n|a]:<dir1>:<dirn>]@ -> using default or append directories after a @[n|a]:@
* @isqfsd=/sqfsdir,n:<dir 1>:<dir n>@ -> neither sqfsdir nor sqfsd default is used, sqfsdir,sqfsd required
* @isqfsd=y,y@ -> using sqfsd and sqfsdir default values do not require any additional argument. 
* @isqfsd=y,a:<dir 1>[:<dir n>]@ -> same as above, however, <dir 1>[:<dir n>] is  appended to sqfsd variable.

*NOTE*: leading '/' slash is only required for @sqfsdir@, else mounting squashed dirs will fail. 

h3. 7. Kernel parameters example

* unencrypted Root LV: @iroot=vgr-lvr ilvm=y ikroot=none ikmap=fr-latin1-i686.bin:ter-g12n.psf@

*Note*: one can append any character or word like `ilvm=lvr` when using LVM on unencrypted PVs.
* Root--key regular passphrase--and fbsplash: @iroot=sda3 ikroot=pwd video=1280x800-24 \@
	@imod=drm,drm_kms_helper,ttm,i915 splash=verbose,theme:livecd-20007.0 console=tty1@
* Root--regular keyfile--on usb stick: @iroot=sda3 ikroot=reg:sdb1:/path/to/keyfile@
* Root--gpg encrypted key on usb stick: @iroot=sda3 ikroot=gpg:sdb1:/path/to/file@
* Swap and root--ldk encrypted--keyfiles: @iroot=sda3 iswap=swap[|file]:sda2[:signature] \@
	@ikroot=ldk:sdb1:/path/to/rootkey ikswap=ldk:sdb1:/path/to/swapkey@
* Regular swap--_and_ TuxOnIce resume on a different PV--regular passphrase: 
	@iswap=swap:sda2 iresume=swap:sda3:0x4400 ikswap=pwd ikresume=pwd@
* Swap file--resuming from hibernation--ldk protected keyfile on usb stick:
	@iswap=file:sda3:0x4400 iresume=toi[|CHAR|WORD] ikswap=ldk:sdb1:/path/to/swapkey@
* crypted LVs [root,swap] using LVM--ldk crypted keyfile and--_and_ mount options for rootfs:
	@iroot=vgr-lvr iswap=file:vgs-lvs:0x4400 imopt=logdev=/dev/mapper/vgs-lvl,inode64,barrier \@
	@ilvm=pva1-UUID=<uuid>:pvb2-UUID=<uuid>,pvc1-UID=<uuid> \@
	@ikroot=ldk:LABEL=PENDRIVE:/path/to/keyfile ikswap=ldk:LABEL=PENDRIVE:/path/to/keyfile@

*NOTE*: multiple key files (one for each group) are supported along with single key file. 

h3. 8. Kernel module groups

To load kernel modules, one could either create needed groups in @[usr/]etc/mkinitramfs-ll/module.$group@ 
(IFS separated list of module). Or else, append a comma seperated list on cmdline using @imod=@ arg.

Supported groups:
* @boot@      -> boot up modules, loaded but not removed
* @tuxonice@  -> tuxonice module, wich aren't removed
* @remdev@    -> modules required to access removable device
* @gpg@       -> modules required to access gpg crypted keyfile
* @sqfsd@     -> modules required for squashfs+aufs, can be built into the kernel

Modules should exist in @/lib/modules/$KV/@, the kernel should support modules [un]loading.
Just make sure to append the necessary modules to the right group in mkinitramfs-ll.conf for autoloading, 
or else append to @opts[-mdep]@ variable to be able to append kernel mdoules to @imod=@ cmdline argument.

h3. 9. Optional user scripts

Now one can add scripts to @/etc/mkinitramfs-ll.d@ of the initramfs root, or else in
@$gitdir/usr/etc/mkinitramfs-ll.d@ if using mkinitramfs-ll.$shell generating script. 
Each script should have a @.sh@ sufix and a @${ishrl}?-*@ prefix as the follwing:
* runlevel 1:  initialization -> splash -> keymap -> font -> print boot msg -> 1
* runlevel 2?: 2s -> swap -> 2r -> resume -> rootfs ->
* runlevel 3?: 3d -> decrypt -> 3f -> rootfs fsck -> 3m -> root mount ->
* runlevel 4?: 4c -> clean up -> 4m -> mount /usr:/var... -> 4u -> umount -> 4s -> switch root

*WARNING*: Back up your data! else... you may lose a few of... them by carelessness.

@vim:fenc=utf-8:ci:pi:sts=0:sw=4:ts=4:@
