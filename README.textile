@$Header: mkinitramfs-ll/README,v 0.6.0 2012/05/16 15:22:35 -tclover Exp $@

bq. "initramfs with *optional [RAID]|[LUKS]|[LVM][TOI]|[AUFS+SQUASHFS]* support [with a handfull zsh and or bash set of scripts]"

*WARNING: USE AT YOUR OWN RISK!*

h3. 1. Getting an intramfs ready

If you have a static busybox binary or if you use Gentoo [you have already one: installed as /bin/bb] 
you can make an initramfs in a sec with locales settings: keymap and consolefont (in addition to 
media-fonts/terminus-font if you use the associated ebuild, or else if you have that package installed).

If you want GnuPG support, yo should have an app-crypt/gnupg-1.4*[static] binary along with its 
options.skel file. Or if you use Gnetoo you can run either gnupg.{ba,z}sh to generate one. 
@gnupg.zsh -W/usr/local/share/mkinitramfs-ll@ if you installed the package or simply gnupg.zsh 
will build a binary in the current directory (with a bin/gpg and misc/share/gnupg/options.skel).

And then run @mkifs-ll.zsh -font -keymap -gpg@ or the bash counterpart @mkifs-ll.bash --font --keymap --gpg@

Gentoo users can build everything with: @autogen.zsh -all -font -keymap@ or @autogen.bash --all --font --keymap@

Of course, one can append extra fonts and keymaps with @-f ter-g12n -y fr-latin1@ etc. and the @-a@ option depend 
on either @{/etc/,}mkifs-ll.conf.${shell}@ so one can put many default values there.

One can get more info on the scripts by running @${script} -u@

h3. 2. _Optional_ kernel cmdline option or arguments

_ONLY_ @iroot@ _IS REQUIRED_ else nothing will happen but, maybe, a kernel panic. 
And of course when using this script, one does not need @root=<arg>@ nor @resume=<arg>@ etc. options.

init script supports the following specific arguments: 

* @iroot=<PV|VG-LV>[:c:<fs>:n]@  -> required root device, recommanded optional @:c:ext4@ 
* @imtopt=<ro,inode64,...>@      -> optional mount options for rootfs.
* @imod=<drm,ttm,...,nouveau>@   -> optional modules [list] to load (in the boot group).
* @ikmap=<kmap>[:<font>@         -> optional keymap and font to load, may be handy for passwords.
* @ishrl=<n>|:<n>@               -> interrupt init and drop to n level or pass n to real init (see EOF)
* @rescue|rescueshell@           -> drops directly into a minimal shell.
* @ilvm=<map-PV>,...,<map-PV>@   -> LVM argument @<mapping-PV>@ is collon ':' separated 
list of PVs of a VG; and comma ',' separated list of VG: 1st for root, 2nd for swap and 
the 3rd for resume, hence one can append enough commas to asign a particular group.
* @iraid=mdN[-UUID=<uuid>-<N>]@  -> comma separated list of arrays for root, swap and resume.
* @iswap=<type>:<VG-LV>[:signature]@       -> e.g. @iswap=swap:sda2@ for a swap device.
* @iresume=<type>:<VG-LV>[:signature]@     -> e.g. @iresume=file:<VG-LV>:0x4400@ for a swapfile.
* @ikroot=<mode>:<device>:</path/to/file>@ -> ikroot for root keyfile or password.
* @ikswap=<mode>:<device>:</path/to/file>@ -> iswap for swap keyfile or password.
* @ikresume=<mode>:<device>:</path/to/key/file>@ -> same as above but for [i]resume.
* @isqfsd=y[|/sqfsdir],y[|[n|a]:<dir>]@    -> squashed directories, see below for more info.    

init script accept @single@ argument and will append single runlevel to real init, no special care 
for @ro|rw@ because it can be appended as @imtopt=ro@, @rw@ mode is the default behavior, for example.

h3. 3. About device, /dev/ prefix and detached LUKS header

There's no need to provide any @/dev/@ prefix for block devices, find_blkd() will take care of it.
Now one can use @UUID=<uuid>@ or @LABEL=<label>@ instead of @[/dev/]sd[a-z0-9]@ for any device or PV. 
However, a leading plus @+@ is used as a separator for detached header device|file when using 

*LUKS*: @<map-UUID=<uid>[|LABEL=<label>][+[/dev/]sd*]|</path/to/header/file>]@

Each encrypted PV, with a detached header is given like:

* @<[/dev/]sda6+[/dev/]sdc>@ for a detached header to @/dev/sdc@ device [passed as @--header /dev/sdc@]
* @</path/to/header/file>@ for a detached header file @[--header /mnt/tok/path/to/header/file]@ 

so in this case, the header file must be in the same removable device or @/boot@ PV used for 
keyfiles [because it'll be too troublesome to make it otherwise]. Of course, a detached header to a device 
should use an UUID or a LABEL instead of @[/dev/]sd[a-z0-9]@ to avoid header mismatch!

h3. About RAID array

iraid argument can take up to 3 comma separated list of RAID arrays: the 1st for root, 2nd for swap
and the 3rd for resume.
Either one has an embeded @/etc/mdadm.conf@ in the initramfs, so one could use @iraid=md0,md1,md2@ to 
enable 3 arrays for root, swap and resume. Either, one can omit to embed one and use either: 
@iraid=mdN-UUID=<uuid>-<N>@, @[/dev/]md<N>@ is a RAID array, @/dev/@ prefix is optional, 
<uuid> the UUID of the array and <N> the partition number to scan: 
@echo DEVICE $(ls /dev/sd*<N>) >> /etc/mdadm.conf@. 
if <N> partition number is not present every device will be scanned!

h3. 4. About LVM argument

Actually a PV in a group, respectively root, swap, resume is given by @<mapping>-<device>@, 
mapping being a mapping name for cryptsetup and a block device|partition without the @/dev/@ prefix.

* LV, PV, VG: Logical Volume, Physical Volume, Volume Group.
* @map-PV@: colon separated list @<mapping-PV>@ e.g. @<pv1-sda1:pv2-sdb1:...>@ for a Volume Group,
the 1st being for root, the 2nd for swap and the 3rd for resume;
so this @ilvm=,swp-sdc1,@ asign a VG for swap VG only.

*NOTE*: for unencrypted PVs, there's no need to provide a list of PVs in ilvm argument. A single 
character or word is enough to activate LVM like @ilvm=y@ for root.

* PV list: now @<map-PV>@ [list] can be replaced with @</path/to/list>@ file, this require the 
use of keyfile to decrypt PV, which means that a removable media or @/boot@ device is mounted. 
List can be a line separated list insted of a collon @:@ list of the forme 
@<mapping-UUID=<uid>[+UUID=<uuid>]@ for an UUID list. One can mix UUID, LABEL and [h|s]d??* 
in a list. However, it's best to use UUID only for detached header from cypthertext device which 
prevent header mismatch. One can use multiple lists up to three, one for each group.

h3. 4. About mount options: imtopt=<rootfs mount options>

Say, you have a @rootfs=xfs[|jsf|reiser|ext*]@ and want to mount your rootfs with specific opts. 
In case of xfs, for exemple, just create your log LV on a different PV than what you're logging 
from and everything is set up--well if the logging LV is in the swap VG--and, in fact, you do 
not need a swap LV there--you just use that VG as if there were one. 

h3. 5. About supported key-files/passwords modes

For partitions or PVs that are encrypted with a key, setting @ikroot@ and/or @ikswap@ and/or 
@ikresume@ is required, otherwise a passphrase is required for _each_ PV as fall back.
This information is then used to obtain each key file from the specified removable media if any. 

* @<mode>@: defines how the init script shall treat the supplied keyfile (see below). 

** @gpg@ 	-> keyfile is GnuPG-protected
** @ldk@ 	-> keyfile is LUKS encrypted, via loop back device.
** @reg@ 	-> keyfile is regular file
** @pwd@ 	-> encrypted on a regular passphrase, if no argument is passed, fallback is pwd mode.
** @none@   -> handy for unencrypted PVs, with or without LVM2 support.

* @<device|dev>@ is a device or PV that will be assigned to the removable media e.g. sd[a-z][0-9]
* @</path/to/file>@ is a full path to file inside the removable media.

h3. 6. About squashed directories 

One can use squashfs+aufs2 to squash directories like @$PORTDIR:var/lib/layamn@, or system related 
directories like @usr:lib32:lib64:bin:sbin@. Advantages are system speed/responsiveness.

Squashed directories argument:
* @isqfsd=y[|/sqfsdir],y[|[n|a]:<dir1>:<dirn>]@ -> using default or append directories after a @[n|a]:@ for sqfsd.
* @isqfsd=/sqfsdir,n:<dir 1>:<dir n>@ -> neither uv_sqfsdir nor uv_sqfsd is used, sqfsdir,sqfsd dirs is required.
* @isqfsd=y,y@ -> using uv_sqfsd and uv_sqfsdir default values do not require any additional argument. 
* @isqfsd=y,a:<dir 1>[:<dir n>]@ -> same as above, however, <dir 1>[:<dir n>] is  appended to sqfsd variable.

*NOTE*: leading '/' slash is only required for @[uv_|]sqfsdir@, else mounting squashed dirs will fail. 

h3. 7. Notes on key modes

* @gpg@   -> encrypted key-file works quite well with 1.4*, passed as @gpg -qd ...@; 
2.0 seems to rquire too much trouble; @/usr/share/gnupg/options.skel@ is required, additionally, 
one can add a @/.gnupg/gpg.conf@ in the initramfs root to avoid its creattion on each reboot. 
* @ldk@   -> encrypted key-file passed to cryptsetup as @-d /dev/mapper/$(basename /path/to/keyfile)@ after decryption. 
* @reg@   -> regular key-file passed to cryptsetup as @-d /path/to/keyfile@.
* @pwd@   -> regular passphrase: it's not mandatory to append any @ik*=pwd@ in the cmdline, this mode is the fallback.
* @none@  -> unencrypted Physical Volume or device: it should be explicitely appended ikroot, ikswap or ikresume. 
I added this mode first for testing purpose for those, like me, who have a working system before encrypting rootfs.
	
*WARNING*: Back up your data! else... you may lose a few of... them by carelessness.

h3. 8. Kernel parameters example

* unencrypted Root LV: @iroot=vgr-lvr ilvm=y ikroot=none ikmap=fr-latin1-i686.bin:ter-g12n.psf@

*Note*: one cann append any character or word like `ilvm=lvr` when using LVM on unencrypted PVs.
* Root--key regular passphrase--and fbsplash: @iroot=sda3 ikroot=pwd video=1280x800-24 \@
	@imod=drm,drm_kms_helper,ttm,i915 splash=verbose,theme:livecd-20007.0 console=tty1@
* Root--regular keyfile--on usb stick: @iroot=sda3 ikroot=reg:sdb1:/path/to/keyfile@
* Root--gpg encrypted key on usb stick: @iroot=sda3 ikroot=gpg:sdb1:/path/to/file@
* Swap and root--ldk encrypted--keyfiles: @iroot=sda3 iswap=swap[|file]:sda2[:signature] \@
	@ikroot=ldk:sdb1:/path/to/rootkey ikswap=ldk:sdb1:/path/to/swapkey@
* Regular swap--_and_ TuxOnIce resume on a different PV--regular passphrase: 
	@iswap=swap:sda2 iresume=swap:sda3:0x4400 ikswap=pwd ikresume=pwd@
* Swap file--resuming from hibernation--ldk protected keyfile on usb stick:
	@iswap=file:sda3:0x4400 iresume=toi[|CHAR|WORD] ikswap=ldk:sdb1:/path/to/swapkey@
* crypted LVs [root,swap] using LVM--ldk crypted keyfile and--_and_ mount options for rootfs:
	@iroot=vgr-lvr iswap=file:vgs-lvs:0x4400 imtopt=logdev=/dev/mapper/vgs-lvl,inode64,barrier \@
	@ilvm=pva1-UUID=<uuid>:pvb2-UUID=<uuid>,pvc1-UID=<uuid> \@
	@ikroot=ldk:LABEL=PENDRIVE:/path/to/keyfile ikswap=ldk:LABEL=PENDRIVE:/path/to/keyfile@

*NOTE*: multiple key files (one for each group) are supported along with single key file. 

h3. 9. Kernel module groups

To load modules, one could either create needed groups in @/etc/modules/@ in the initramfs. Each file 
is a line seperated list of modules. Either append a comma seperated list on cmdline using @imod=@ arg.

Supported groups:
* @boot@      -> boot time modules loaded but not removed.
* @tuxonice@  -> tuxonice module, wich aren't removed if you don't comment in a line.
* @remdev@    -> modules required to access removable device
* @gpg@       -> modules required to access gpg protected file.
* @sqfsd@     -> modules required for squashfs+aufs2, you can still build them into the kernel.

Modules should exist in @/lib/modules/$KERNEL_VERSION/@, the kernel should support modules [un]loading.
Just make sure to append the necessary modules to right group in mkifs-ll.conf for autoloading, or else
use @opts[*mdep]@ variable to be able to append mdoules to imod cmdline arg when using the building script.

h3. 10. Optional user scripts

Now one can add scripts to @/etc/local.d@ of the initramfs, or @$gitdir/misc@ if using mkifs-ll 
building script. Each script should have a @.sh@ sufix and a @${ishrl}?-*@ prefix as the follwing:
* runlevel 1: boot and cmdline modules, keymap, font -> 1 -> print msg;
* runlevel 2?: before... 2s -> swap: 2r -> resume;
* runlevel 3?: before... 3d -> decrypt: 3f -> fsck: 3m -> mount root;
* runlevel 4?: before... 4c -> clean up: 4u -> umount: 4s -> switch root.

@vim:fenc=utf-8:ci:pi:sts=0:sw=4:ts=4:@
