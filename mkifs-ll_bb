#!/bin/zsh
# $Id: mkinitramfs-ll/mkifs-ll_bb[.zsh],v 0.3.3 2011/11/05 -tclover Exp $

usage() {
  cat <<-EOF
  usage: ${(%):-%1x} [-b|--build [-m|--minimal] [--uCl-arch=i386] ] [--keymap=map:kmap]
  -b, --build	          build a [minimal|full applets featured] static busybox binary 
  -m, --minimal	          build busybox with minimal applets, default is full applets
  -i, --install	          install busybox with symliks to \$BINDIR, require -b|--build
      --keymap=map:kmap   generate kmap keymap using map as input keymap.
      --uCl-arch=i386     ARCH string needed to build busybox linked uClibc instead of..		
  -u, --usage             print the usage/help and exit
EOF
}

[[ $# = 0 ]] && usage && exit 0
while [[ $# > 0 ]] {
	case $1 in
		-b|--build) CONFIG=y; BBB=y; shift;;
		-m|--minimal) CONFIG=m; shift;;
		-i|--install) IBB=y; shift;;
		--tmp=*) TMP_DIR=${1#*=}; shift;;
		--ucl-arch=*) UCL_ARCH=${1#*=}-uClibc-; shift;;
		--keymap=*) KEYMAP_IN=${${(pws,:,)${1#*=}}[(w)1]}; KBB=y 
		           KEYMAP_OUT=${${(pws,:,)${1#*=}}[(w)2]}; shift;;
		-u|--usage|*) usage; exit 0;;
	esac
}

error() { print -P "%B%F{red}*%b%f $@"; }
die()   { error $@; exit 1; }
alias die='die "%F{yellow}%1x:%U${(%):-%I}:%u%f" $@'

[[ -f ./mkifs-ll.conf ]] && source ./mkifs-ll.conf
:	${WORKDIR:=$(pwd)}
:	${MISCDIR:=$WORKDIR/misc}
:	${BINDIR:=$WORKDIR/bin}

build_busybox() {
	cd ${PORTDIR:-/usr/portage}/sys-apps/busybox || die "eek"
	BBT=$(emerge -pvO busybox|grep -o "busybox-[-0-9.r]*")
	ebuild $BBT.ebuild clean || die "clean failed"
	ebuild $BBT.ebuild unpack || die "unpack failed"
	cd ${PORTAGE_TMPDIR:-/var/tmp}/portage/sys-apps/$BBT/work/$BBT || die "eek!"

	if [[ $CONFIG = m ]] {
		make allnoconfig || die "eek!"
		sed -e "s|# CONFIG_INSTALL_NO_USR is not set|CONFIG_INSTALL_NO_USR=y|" \
		-e "s|# CONFIG_STATIC is not set|CONFIG_STATIC=y|" \
		-e "s|CONFIG_FEATURE_SH_IS_NONE=y|# CONFIG_FEATURE_SH_IS_NONE is not set|" \
		-e "s|# CONFIG_FEATURE_SH_IS_ASH is not set|CONFIG_FEATURE_SH_IS_ASH=y|" \
		-e "s|# CONFIG_ASH is not set|CONFIG_ASH=y|" \
		-e "s|# CONFIG_ASH_BUILTIN_ECHO is not set|CONFIG_ASH_BUILTIN_ECHO=y|" \
		-e "s|# CONFIG_CAT is not set|CONFIG_CAT=y|" \
		-e "s|# CONFIG_CP is not set|CONFIG_CP=y|" \
		-e "s|# CONFIG_CUT is not set|CONFIG_CUT=y|" \
		-e "s|# CONFIG_HEAD is not set|CONFIG_HEAD=y|" \
		-e "s|# CONFIG_GREP is not set|CONFIG_GREP=y|" \
		-e "s|# CONFIG_INIT is not set|CONFIG_INIT=y|" \
		-e "s|# CONFIG_LN is not set|CONFIG_LN=y|" \
		-e "s|# CONFIG_MKDIR is not set|CONFIG_MKDIR=y|" \
		-e "s|# CONFIG_MKNOD is not set|CONFIG_MKNOD=y|" \
		-e "s|# CONFIG_MODPROBE is not set|CONFIG_MODPROBE=y|" \
		-e "s|# CONFIG_MOUNT is not set|CONFIG_MOUNT=y|" \
		-e "s|# CONFIG_MV is not set|CONFIG_MV=y|" \
		-e "s|# CONFIG_MDEV is not set|CONFIG_MDEV=y|" \
		-e "s|# CONFIG_UMOUNT is not set|CONFIG_UMOUNT=y|" \
		-e "s|# CONFIG_RM is not set|CONFIG_RM=y|" \
		-e "s|# CONFIG_RMMOD is not set|CONFIG_RMMOD=y|" \
		-e "s|# CONFIG_SED is not set|CONFIG_SED=y|" \
		-e "s|# CONFIG_SLEEP is not set|CONFIG_SLEEP=y|" \
		-e "s|# CONFIG_SWITCH_ROOT is not set|CONFIG_SWITCH_ROOT=y|" \
		-e "s|# CONFIG_TEST is not set|CONFIG_TEST=y|" \
		-e "s|# CONFIG_TR is not set|CONFIG_TR=y|" \
		-e "s|# CONFIG_WHICH is not set|CONFIG_WHICH=y|" \
		-i .config || die "minimal cfg failed"
	} else {
		make defconfig || die "defcfg failed"
		sed -e "s|# CONFIG_STATIC is not set|CONFIG_STATIC=y|" \
		-e "s|# CONFIG_INSTALL_NO_USR is not set|CONFIG_INSTALL_NO_USR=y|" \
		-i .config || die "cfg failed" 
	}

	# For uClibc users, you need to adjust the cross compiler prefix properly (i386-uclibc-)
	if [[ -n $UCL_ARCH ]] {
	sed -e "s|CONFIG_CROSS_COMPILER_PREFIX=\"\"|CONFIG_CROSS_COMPILER_PREFIX=\"$UCL_ARCH\"|" \
	-i .config || die "setting uClib ARCH failed" 
	}
	make && make busybox.links || die "bb build failed"
}

install_busybox() {
	if [[ -e $TMP_DIR ]] { 
		make install CONFIG_PREFIX=$TMP_DIR/busybox
		rm -rf /tmp/busybox 
	}
	./applets/install.sh $BINDIR --symlinks
}

build_keymap() { 
	# save the current keymap
	dumpkeys > default_keymap || die "dumping keymap failed"
	loadkeys $KEYMAP_IN || die "loading $KEMAP_IN failed"
	if [[ $UNICODE = y ]] { dumpkeys|loadkeys -u || die "unicode conversion failed" }
	./busybox dumpkmap > $KEYMAP_OUT || die "keymap build failed"
	# load back your keymap
	loadkeys default_keymap && rm default_keymap || die "re-loading default keymap failed"
}

if [[ ${BBB} = y ]] {
	mkdir -p $BINDIR
	build_busybox
	[[ $IBB = y ]] && install_busybox
	cp -a busybox $BINDIR/ || die "failed to copy bb binary"
	cp busybox.links $BINDIR/applets || die "failed to copy applets"
	unset CONFIG IBB 
}

if [[ $KBB = y ]] {
	mkdir -p $BINDIR
	[[ $BBB != y ]] && cd $BINDIR || die "eek!"
	build_keymap
	if [[ $BBB = y ]] { cp $KEYMAP_OUT $BINDIR/ || die "$KEYMAP_OUT copy failed" }
	KEYMAPS+=":$KEYMAP_OUT"
	unset KEYMAP_IN KEYMAP_OUT UNICODE KBB 
}

if [[ $BBB = y ]] {
	cd ${PORTDIR:-/usr/portage}/sys-apps/busybox || die "eek"
	ebuild $BBT.ebuild clean || die "eek"
	cd $WORKDIR || die "eek!"
	unset BBB BBT 
}

# vim:fenc=utf-8:ci:pi:sts=0:sw=4:ts=4:
