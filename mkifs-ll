#!/bin/bash
revision=0.3.3_p20110906

usage() {
	cat << EOF
   ${0##*/} [OPTIONS]
      --aufs		adds aufs[2] support to the initramfs for (aufs2+squashfs).
  -e, --e-version=<str>	append <str> extra version after k-version to the initramfs.
  -k, --k-version=<str>	build an initramfs for 'k-version=\${KV:-\$(uname -r)}' kernel version.
      --font=<font>	adds <font> to the initramfs.
  -f, --full		build with '--aufs --bin-dir --font --lvm --gpg --misci --toi' options.
      --mod=<mod>	adds '<mod>' module, space separated list, to the initramfs.
      --fsck=<fs>	adds fsck.<fs> binary with linked libraries for fsck.<fs> support.
      --bin-dir=bin 	use binaries [gpg/options.skel|busybox/applets|kmap-ARCH.bin] from 'bin'.
      --comp-cmd=cmd	compression command to use to build initramfs, default is xz.
  -g, --gpg 		adds GPG support, require a static app-crypt/gnupg-1.4 and options.skel.
      --prefix=mvlinuz.	prefix scheme to name the initramfs default is \`kernel-'.
      --kmap=km-x86.bin adds 'km-x86.bin' key-map in the initramfs, full path is required.
  -l, --lvm 		adds LVM2 support, require a static sys-fs/lvm2 build.
      --misc-dir=misc 	use 'misc/{.gnupg/gpg.conf,share/gnupg/options.skel,mkifs-ll.conf}',  
      			one can add manpages and info files of gpg/lvm in misc/share as the whole 
			directory will be copied over into the initramfs.
      --splash=theme	splash theme to include in the initramfs.
      --toi		adds tuxonice support.
  -h, --help		print this help.
  -v, --version 	print version.

  usages:
  # called without an argument, will build an initramfs for \$(uname -r) with LUKS support.

  # build with LUKS/GPG/LVM2/AUFS2 support for kernel 3.0.3-git with 'd0' string extra version.
  ${0##*/} --e-version=d0 --k-version=3.0.3-git --full
  
  <str> 	string
  <font>	full path to font, easy to include one into 'bin' directory and add its name
  		into \${FONT:=\$BIN/<name>} definition into mkifs-ll.conf
  <km-x86.bin>	same as above for KEYMMAP variable.
  <fs> 		file system e.g. xfs, default is 'btrfs jfs reiserfs squashfs xfs reiser4'.
  <theme>	full path to splash 'theme'.
  <fs> 		file sytem.
  bin		full path to directory with the necessary binaries to build an initramfs.
  misc		second full path to directory with extra necessary files.
  --*=		all arguments will use default value definied in mkifs-ll.conf if empty.
EOF
}

error() { echo -ne "\033[1;31m* \033[0m$@\n"; }
info() 	{ echo -ne "\033[1;32m* \033[0m$@\n"; }

die() {
	error "$@"
	exit 1
}

addmodule() {
	for mod in $@; do
		local module=$(find /lib/modules/$K_VERSION -name $mod.ko)
		if [ -z $module ]; then info "$mod does not exist"
		else 	mkdir -p .${module%/*}
			cp -ar $module .${module%/*} || die "$module copy failed"
		fi
	done
}

[ $# = 0 ] && info "initramfs will be build with only LUKS support."

while [[ $# > 0 ]]; do
	case $1 in
		-v|--version) echo "version $revision"; exit 0;;
		--aufs) iAUFS=y; shift;;
		--bin-dir=*) [ -n "${1#*=}" ] && BIN=${1#*=}; shift;;
		--comp-cmd=*) [ -n "${1#*=}" ] && CMD=${1#*=}; shift;;
		-e) E_VERSION=$2; shift 2;;
		--e-version=*) [ -n "${1#*=}" ] && E_VERSION=${1#*=}; shift;;
		--font=*) [ -n "${1#*=}" ] && FONT=${1#*=}; shift;;
		-f|--full) iAUFS=y; iGPG=y; iLVM=y, iTOI=y; shift;;
		--mod=*) [ -n "${1#*=}" ] && MOD=${1#*=}; shift;;
		--fsck=*) [ -n "${1#*=}" ] && FSCK=${1#*=}; shift;;
		-g|--gpg) iGPG=y; shift;;
		--prefix=*) PREFIX=${1#*=}; shift;; 
		-k) K_VERSION=$2; shift 2;;
		--k-version=*) K_VERSION=${1#*=}; shift;;
		--kmap=*) [ -n "${1#*=}" ] && KEYMAP=${1#*=}; shift;;
		--lvm|-l) iLVM=y; shift;;
		--misc-dir=*) [ -n "${1#*=}" ] && MISC=${1#*=}; shift;;
		--splash=*) [ -n "${1#*=}" ] && SPLASH=${1#*=}; shift;;
		--toi) iTOI=y; shift;;
		-h|--help|*) usage; exit 0;;
	esac
done

:	${WORKDIR:=$(pwd)}
:	${MISC:=$WORKDIR/misc}
[[ -f "$MISC/mkifs-ll.conf" ]] && . $MISC/mkifs-ll.conf
: 	${K_VERSION:=$(uname -r)}
[[ -n "$E_VERSION" ]] && E_VERSION=-$E_VERSION
:	${INITRAMFS:=/boot/${PREFIX:-kernel-}$K_VERSION$E_VERSION-ll-initrd.xz}
:	${INITDIR:=${WORKDIR}/initrd-ll$(echo $K_VERSION|cut -b4-)}
:	${BIN:=$WORKDIR/bin}
:	${CMD:=xz -9 --check=crc32}

case ${CMD%%\ *} in
	bzip2)	INITRAMFS=${INITRAMFS/.xz/.bz2};;
	gzip) 	INITRAMFS=${INITRAMFS/.xz/.gz};;
	lzma)	INITRAMFS=${INITRAMFS/.xz/.lzma};;
	lzop)	INITRAMFS=${INITRAMFS/.xz/.lzo};;
esac

echo ">>> building $INITRAMFS..."
rm -rf $INITDIR || die "eek!"
mkdir -p $INITDIR && cd $INITDIR || die "eek!"
mkdir -p {,s}bin dev proc root sys usr/{bin,sbin} newroot || die "eek!"
mkdir -p lib64/splash/cache etc/{modules,splash} mnt/tok || die "eek!"
ln -sf lib64 lib || die "eek!"

cp -a /dev/{console,random,urandom,mem,null,tty,tty1,zero} dev/ || {
	[ -c dev/console ] 	|| mknod dev/console c 5 1 	|| die "eek!"
	[ -c dev/urandom ] 	|| mknod dev/urandom c 1 9 	|| die "eek!"
	[ -c dev/random ] 	|| mknod dev/random c 1 8 	|| die "eek!"
	[ -c dev/mem ] 		|| mknod dev/mem c 1 1 		|| die "eek!"
	[ -c dev/null ] 	|| mknod dev/null c 1 3 	|| die "eek!"
	[ -c dev/tty ] 		|| mknod dev/tty c 5 0 		|| die "eek!"
	[ -c dev/tty1 ] 	|| mknod dev/tty1 c 4 1 	|| die "eek!"
	[ -c dev/zero ] 	|| mknod dev/zero c 1 5 	|| die "eek!"
}

cp -a $WORKDIR/init . || die "failed to copy init"
cp -a $BIN/applets etc/ || die "failed to copy applets"
cp -a /sbin/{cryptsetup,v86d} sbin/ || die "faied to copy v86d"
cp -a $BIN/busybox bin/ || die "failed to copy busybox"

if [ -e "$BIN"/applets ]; then
	for app in $(< etc/applets); do
	case ${app%/*} in
		/bin) cd bin && ln -sf busybox ${app##*/} && cd .. || die "eek!";;
		/sbin) cd sbin && ln -sf ../bin/busybox ${app##*/} && cd .. || die "eek!";;
		*) ln -sf bin/busybox ${app#*/} || die "eek";;
	esac
	done
else 	sed -e 's|#\t/bin/busybox|\t/bin/busybox|' -i init || die "eek!"; fi

if [ -n "$iAUFS" ]; then
	MOD+=" aufs"
	cp -a /sbin/{,u}mount.aufs sbin/ || die "failed to copy *mount.aufs"
	echo aufs > etc/modules/sqfsd || die "eek!"
	unset iAUFS; fi

if [ -n "$iGPG" ]; then
	cp -a $BIN/gpg usr/bin/ || die "failed to copy gpg"
	cp -ar $MISC/share usr/ || die "failed to copy $MISC/share"
	cp -ar $MISC/.gnupg . || die "failed to copy $MISC/.gnupg"
	unset iGPG; fi

if [ -n "$iLVM" ]; then
	cp -a /sbin/lvm.static sbin/lvm || die "eek!"
	cd sbin
	for lpv in {vg,pv,lv}{change,create,re{move,name},s{,can}} {lv,vg}reduce lvresize vgmerge
		do ln -s lvm $lpv || die "eek!"
	done
	cd ..
	unset iLVM; fi

addmodule "$MOD" && unset MOD

if [ -n "$FSCK" ]; then
	for fs in $FSCK; do
		cp -a /sbin/fsck.$fs sbin/
		for lib in $(ldd /sbin/fsck.$fs|sed -e "s:li.*=>\ ::g" -e "s:\ (.*)::g")
			do cp -adH $lib lib/ || die "failed to copy $lib library"; done
	done
	unset FSCK; fi

for key in ${!MODULES[@]}; do
	for grp in ${MODULES[$key]}; do
		if [ -n "${grp#*=}" ]; then
			for mod in ${grp#*=}
				do echo $mod >> etc/modules/${grp%=*}; done
		fi
	done
	unset MODULES; done

if [ -n "$KEYMAP" ]; then 
	cp -a "$KEYMAP" etc/ || die "failed to copy keymap"
	unset KEYMAP; fi

[ -e "$FONT" ] && cp -a "$FONT" etc/

if [ -n "$SPLASH" ]; then
	if [ -n "$iTOI" ]; then
		cp -a /sbin/tuxoniceui_text sbin/ || die "failed to copy toi helper"
		unset iTOI; fi
	cp -a /sbin/splash_util.static sbin/ || die "failed to copy splash_util.static"
	cp -ar "$SPASH" etc/splash/ || die "splash themes does not exist"
	unset SPLASH; fi

find . -print0|cpio --null -ov --format=newc|$CMD > $INITRAMFS || die "eek!"

echo ">>> $INITRAMFS initramfs built"

unset K_VERSION
unset E_VERSION
unset INITDIR
unset BIN
unset CMD
unset INITRAMFS
unset MISC
