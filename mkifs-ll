#!/bin/zsh
# $Id: mkinitramfs-ll/mkifs-ll[.zsh],v 0.4.1 2011/12/02 -tclover Exp $
revision=0.4.1

usage() {
  cat <<-EOF
  usage: ${(%):-%1x} [OPTIONS...]
  -a|-all              short forme/hand of '-sqfsd -lvm -gpg -toi'
  -f|-font :<font>     append collon seperated list of fonts to in include
  -e|-ev d             append an extra 'd' version after \$kv to the initramfs image
  -k|-kv 3.1.4-git     build an initramfs for '3.1.4-git' kernel, else for \$(uname -r)
  -c|-comp             compression command to use to build initramfs, default is 'xz -9..'
  -g|-gpg              adds GnuPG support, require a static gnupg-1.4.x and 'options.skel'
  -p|-prefix vmlinuz.  prefix scheme to name the initramfs image default is 'initrd-'
  -y|-keymap kmx86.bin append collon seperated list of keymaps to include in the initramfs
  -l|-lvm              adds LVM2 support, require a static sys-fs/lvm2[lvm.static] binary
  -B|-bindir bin       try to include binaries from bin dir (busybox/applets/gpg) first
  -M|-miscdir misc     use msc dir for {.gnupg/gpg.conf,share/gnupg/options.skel} files,
                       one can add manpages gpg/lvm/cryptsetup and user scripts as well
  -W|-wokdir dir       working directory where to create initramfs dir, default is PWD
  -b|-bin :<bin>       append collon seperated list of binar-y-ies to include
  -m|-mdep :<mod>      collon seperated list of kernel module-s to include
  -S|-splash :<theme>  collon ':' separated list of splash themes to include
    -mgpg :<mod>       collon seperated list of kernel modules to add to gpg group
    -mboot :<mod>      collon seperated list of kernel modules to add to boot group
    -msqfsd :<mod>     collon seperated list of kernel modules to add to sqfsd group
    -mremdev :<mod>    collon seperated list of kernel modules to add to remdev group
    -mtuxonice :<mod>  collon seperated list of kernel modules to add to tuxonice group
  -t|-toi              adds tuxonice support for splash, require tuxoniceui_text binary
  -s|-sqfsd            adds aufs(+squashfs modules +{,u}mount.aufs binaries) support
  -u|-usage            print this help/usage and exit
  -v|-version          print version string and exit

  # usage: without an argument, build an initramfs for \$(uname -r) with only LUKS support

  # build with LUKS/GPG/LVM2/AUFS2 support for 3.0.3-git kernel with an extra 'd' version
  ${(%):-%1x} -all -ed -k3.0.3-git
  
  # NOTE: <str>: string; <font>: fonts list; <theme>: theme list; <mod>: kernel modules...
EOF
}

error() { print -P "%B%F{red}*%b%f $@"; }
info()  { print -P "%B%F{green}*%b%f $@"; }
warn()  { print -P "%B%F{red}*%b%f $@"; }
die()   { error $@; exit 1; }
alias die='die "%F{yellow}%1x:%U${(%):-%I}%u:%f" $@'

addnodes() {
	[ -c dev/console ] || mknod dev/console c 5 1 || die "eek!"
	[ -c dev/urandom ] || mknod dev/urandom c 1 9 || die "eek!"
	[ -c dev/random ] || mknod dev/random c 1 8 || die "eek!"
	[ -c dev/mem ] || mknod dev/mem c 1 1 || die "eek!"
	[ -c dev/null ] || mknod dev/null c 1 3 || die "eek!"
	[ -c dev/tty ] || mknod dev/tty c 5 0 || die "eek!"
	for i ($(seq 1 6)) [[ -c dev/tty$i ]] || mknod dev/tty$i c 4 $i || die "eek!"
	[ -c dev/zero ] || mknod dev/zero c 1 5 || die "eek!"
}

if [[ $# = 0 ]] { if [[ -z ${(k)opts[*]} ]] { typeset -A opts }
	info "initramfs will be build with only LUKS support."
} else {
	zmodload zsh/zutil
	zparseopts -E -D -K -A opts a all s sqfsd g gpg l lvm t toi c:: comp:: \
		e:: ev:: k:: kv:: m+:: mdep+:: f+:: font+:: M:: miscdir \
		S:: splash:: u usage v version W:: workdir::  b:: bin:: p:: prefix:: \
		y:: keymap:: B:: bindir:: mboot+:: mgpg+:: msqfsd+:: mtuxonice+::
	if [[ $# != 0 ]] || [[ -n ${(k)opts[-u]} ]] || [[ -n ${(k)opts[-usage]} ]] {
		usage; exit 0 }
	if [[ -n ${(k)opts[-v]} ]] || [[ -n ${(k)opts[-version]} ]] {
		print "${(%):-%1x}-$revision"; exit 0 }
}
setopt EXTENDED_GLOB
setopt NULL_GLOB
:	${opts[-kv]:=${opts[-k]:-$(uname -r)}}
:	${opts[-ev]:=$opts[-e]}
:	${opts[-prefix]:=${opts[-p]:-initrd-}}
:	${opts[-workdir]:=${opts[-W]:-$(pwd)}}
:	${opts[-miscdir]:=${opts[-M]:-$opts[-workdir]/misc}}
:	${opts[-bindir]:=${opts[-B]:-$opts[-workdir]/bin}}
:	${opts[-comp]:=${opts[-c]:-xz -9 --check=crc32}}
[[ -f ./mkifs-ll.conf ]] && source ./mkifs-ll.conf
:	${INITDIR:=${opts[-workdir]}/${opts[-prefix]}${opts[-kv]}${opts[-ev]}}
:	${INITRAMFS:=/boot/${opts[-prefix]}${opts[-kv]}${opts[-ev]}.cpio.xz}
if [[ -n ${(k)opts[-a]} ]] || [[ -n ${(k)opts[-all]} ]] {
	opts[-g]=; opts[-l]=; opts[-s]=; opts[-t]= }

case ${=opts[(w)1,-comp]} in
	bzip2) INITRAMFS=${INITRAMFS/.xz/.bz2};;
	gzip)  INITRAMFS=${INITRAMFS/.xz/.gz};;
	lzma)  INITRAMFS=${INITRAMFS/.xz/.lzma};;
	lzop)  INITRAMFS=${INITRAMFS/.xz/.lzo};;
esac

echo ">>> building $INITRAMFS..."
rm -rf $INITDIR || die "eek!"
mkdir -p $INITDIR && cd $INITDIR || die "eek!"
mkdir -p {,usr/}{,s}bin dev proc root sys newroot mnt/tok || die "eek!"
mkdir -p etc/{modules,splash,local.d} || die "eek!"
[[ -n ${$(uname -a)[(r)x86_64]} ]] && opts[-arch]=64 || opts[-arch]=32
mkdir -p lib$opts[-arch]/{splash/cache,modules/$opts[-kv]} || die "eek!"
ln -sf lib$opts[-arch] lib || die "eek!"

cp -a /dev/{console,random,urandom,mem,null,tty,tty[1-6],zero} dev/ || addnodes
[[ ${${(pws:.:)opts[-kv]}[1]} -eq 3 ]] && \
	[[ ${${(pws:.:)opts[-kv]}[2]} -ge 1 ]] && {
	cp -a {/,}dev/loop-control &>/dev/null || mknod dev/loop-control c 10 237 || die "eek!"
}
cp -a $opts[-workdir]/init . && chmod 775 init || die "failed to copy init"
cp -a {/,}lib/modules/$opts[-kv]/modules.dep || die "failed to copy modules.dep"
[[ -e $opts[-miscdir]/msg ]] && cp $opts[-miscdir]/msg etc/
for scr ($opts[-miscdir]/*(.).sh) cp $scr etc/local.d/

if [[ -x $opts[-bindir]/busybox ]] { opts[-bin]+=:bin/busybox
} elif [[ $(which bb) != "bb not found" ]] { 
	cp $(which bb) bin/busybox
	warn "unexpected results may happen using $(which bb) because of missing applets" 
} else { die "no busybox/bb binary found" }
if [[ -e $opts[-bindir]/applets ]] { cp -a $opts[-bindir]/applets etc/
	for app ($(< etc/applets)) 
	case $app:h in
		/sbin) cd sbin && ln -s ../bin/busybox $app:t && cd .. || die "eek!";;
		/bin) cd bin && ln -s busybox $app:t && cd .. || die "eek!";;
		/) ln -s bin/busybox $app:t || die "eek!";;
	esac
} else { sed -e 's|#\t/bin/busybox|\t/bin/busybox|' -i init || die "eek!" 
	ln -sf bin/busybox linuxrc || die "eek!"
	cd bin && ln -sf busybox sh && cd .. || die "eek!"
}

if [[ -n ${(k)opts[-gpg]} ]] || [[ -n ${(k)opts[-g]} ]] { 
	if [[ -x $opts[-bindir]/gpg ]] { opts[-bin]+=:usr/bin/gpg
	} elif [[ $($(which gpg) --version | grep 'gpg (GnuPG)' | cut -c13) = 1 ]] {
		opts[-bin]+=:$(which gpg)
	} else { die "there's no usable gpg/gnupg-1.4.x" }
	cp -r $opts[-miscdir]/share usr/ || die "failed to copy ${opts[-miscdir]}/share"
	cp -r $opts[-miscdir]/.gnupg . || die "failed to copy ${opts[-miscdir]}/.gnupg"
	chmod 700 .gnupg; chmod 600 .gnupg/gpg.conf
}

if [[ -n ${(k)opts[-lvm]} ]] || [[ -n ${(k)opts[-l]} ]] { opts[-bin]+=:lvm.static
	cd sbin
	for lpv ({vg,pv,lv}{change,create,re{move,name},s{,can}} \
		{lv,vg}reduce lvresize vgmerge)
		ln -sf lvm $lpv || die "eek!"
	cd ..
}

if [[ -n ${(k)opts[-sqfsd]} ]] || [[ -n ${(k)opts[-s]} ]] { 
	opts[-bin]+=:mount.aufs:umount.aufs
	for fs ({au,squash}fs) 
		[[ -n ${(pws,:,)opts[(rw)$fs,-msqfsd]} ]] || opts[-msqfsd]+=:$fs
}

addmodule() {
	local ret
	for mod (/lib/modules/$opts[-kv]/**/$@.(ko|o))
		if [[ ! -e $mod ]] { warn "$mod does not exist"; (( ret = $ret +1 )); break 
		} else { mkdir -p .$mod:h && cp -ar $mod .$mod || die "$mod copy failed" }
	return $ret
}

for module (${(pws,:,)opts[-mdep]} ${(pws,:,)opts[-m]}) addmodule $module
for grp (boot gpg remdev sqfsd tuxonice) 
   for module (${(pws,:,)opts[-m$grp]})
	  addmodule $module && echo $module >> etc/modules/$grp

for keymap (${(pws,:,)opts[-keymap]} ${(pws,:,)opts[-y]}) 
	if [[ -e $keymap ]] { cp -a $keymap etc/ 
	} elif [[ -e $opts[-bindir]/$keymap ]] { cp -a $opts[-bindir]/$keymap etc/
	} else { warn "failed to copy $keymap keymap " }

for font (${(pws,:,)opts[-font]} ${(pws,:,)opts[-f]})
	if [[ -e $opts[-bindir]/$font ]] { cp -a $opts[-bindir]/$font etc/ 
	} elif [[ -e $font ]] { cp -a $font etc/
	} elif [[ -e /usr/share/consolefonts/$font.gz ]] {
		cp /usr/share/consolefonts/$font.gz . && gzip -d $font.gz && \
			mv $font etc/ || warn "failed to copy /usr/share/consolefonts/$font.gz"
	} else { warn "failed to copy $font font" } 

if [[ -n $opts[-splash] ]] || [[ -n $opts[-S] ]] { opts[-bin]+=:splash_util.static
	if [[ -n ${(k)opts[-tuxonice]} ]] || [[ -n ${(k)opts[-t]} ]] {
		opts[-bin]+=:tuxoniceui_text }
	for theme (${(pws,:,)opts[-splash]} ${(pws,:,)opts[-S]})
		if [[ -d $theme ]] { cp -r $theme etc/splash/ 
		} elif [[ -d $opts[-miscdir]/$theme ]] { cp -r $opts[-miscdir]/$theme etc/splash/  
		} elif [[ -d /etc/$theme ]] { cp -r {/,}etc/splash/$theme
			info "copied the whole /etc/splash/$theme theme"
		} else { warn "splash themes does not exist" }
}

bincp() {
	for bin ($@)
	if [[ -x $bin  ]] { 
		cp -aL $bin .${bin/\.static}
		if [[ "$(ldd $bin)" != *"not a dynamic executable" ]] {
			for lib ($(ldd $bin|sed -e "s:li.*=>\ ::g" -e "s:\ (.*)::g"))
			cp -adH $lib lib/ || die "failed to copy $lib library" 
		} else { info "$bin is a static binary." }
		} else {  warn "$bin binary doesn't exist" }
}

for bin (${(pws,:,)opts[-bin]} ${(pws,:,)opts[-b]})
	if [[ -x $opts[-bindir]/${bin##*/} ]] { 
		cp $opts[-bindir]/${bin##*/} ./$bin || die "failed to copy $bin"
	} elif [[ -x /$bin ]] { bincp /$bin
	} else { bincp $(which $bin:t) }

find . -print0 | cpio --null -ov --format=newc | ${=opts[-comp]} > $INITRAMFS || die "eek!"

echo ">>> $INITRAMFS initramfs built"

unset INITDIR INITRAMFS opts

# vim:fenc=utf-8:ci:pi:sts=0:sw=4:ts=4:
