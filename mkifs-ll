#!/bin/bash
revision=0.3.5_p20111023

usage() {
  cat << EOF
  usage: ${0##*/} [OPTIONS...]
      --aufs		adds aufs[2] support to the initramfs for (aufs2+squashfs).
  -e, --e-version=<str>	append <str> extra version after k-version to the initramfs.
  -k, --k-version=<str>	build an initramfs for 'k-version=\${KV:-\$(uname -r)}' kernel version.
      --font=<font>	adds <font> to the initramfs.
  -f, --full		build with '--aufs --bin-dir --font --lvm --gpg --misci --toi' options.
      --mod=<mod>	adds '<mod>' module, space separated list, to the initramfs.
      --fsck=<fs>	adds fsck.<fs> binary with linked libraries for fsck.<fs> support.
      --bin-dir=bin 	use binaries [gpg/options.skel|busybox/applets|kmap-ARCH.bin] from 'bin'.
      --comp-cmd=cmd	compression command to use to build initramfs, default is xz.
  -g, --gpg 		adds GPG support, require a static app-crypt/gnupg-1.4 and options.skel.
      --prefix=mvlinuz.	prefix scheme to name the initramfs default is \`kernel-'.
      --kmap=km-x86.bin adds 'km-x86.bin' key-map in the initramfs, full path is required.
  -l, --lvm 		adds LVM2 support, require a static sys-fs/lvm2 build.
      --misc-dir=misc 	use 'misc/{.gnupg/gpg.conf,share/gnupg/options.skel,mkifs-ll.conf}',  
      			one can add manpages and info files of gpg/lvm in misc/share as the whole 
			directory will be copied over into the initramfs.
      --splash=theme	splash theme to include in the initramfs.
      --toi		adds tuxonice support.
  -h, --help		print this help.
  -v, --version 	print version.

  usages:
  # runned without an argument, build an initramfs for \$(uname -r) with only LUKS support.

  # build with LUKS/GPG/LVM2/AUFS2 support for kernel 3.0.3-git with 'd0' string extra version.
  ${0##*/} --e-version=d0 --k-version=3.0.3-git --full
  
  <str> 	string
  <font>	full path to font, easy to include one into 'bin' directory and add its name
  		into \${FONT:=\$BIN/<name>} definition into mkifs-ll.conf
  <km-x86.bin>	same as above for KEYMMAP variable.
  <fs> 		file system e.g. xfs, default is 'btrfs jfs reiserfs squashfs xfs reiser4'.
  <theme>	full path to splash 'theme'.
  <fs> 		file sytem.
  bin		full path to directory with the necessary binaries to build an initramfs.
  misc		second full path to directory with extra necessary files.
  --<arg>=	all arguments will use default value definied in mkifs-ll.conf if empty.
  b
EOF
}

error() { echo -ne "\e[1;31m* \e[0m$@\n"; }
info() 	{ echo -ne "\e[1;32m* \e[0m$@\n"; }
warn() 	{ echo -ne "\e[1;33m* \e[0m$@\n"; }
die()   { error "$@"; exit 1; }

addnodes() {
	[ -c dev/console ] || mknod dev/console c 5 1 || die "eek!"
	[ -c dev/urandom ] || mknod dev/urandom c 1 9 || die "eek!"
	[ -c dev/random ] || mknod dev/random c 1 8 || die "eek!"
	[ -c dev/mem ] || mknod dev/mem c 1 1 || die "eek!"
	[ -c dev/null ] || mknod dev/null c 1 3 || die "eek!"
	[ -c dev/tty ] || mknod dev/tty c 5 0 	|| die "eek!"
	[ -c dev/tty1 ] || mknod dev/tty1 c 4 1 || die "eek!"
	[ -c dev/zero ] || mknod dev/zero c 1 5 || die "eek!"
}

[[ $# = 0 ]] && info "initramfs will be build with only LUKS support."

while [[ $# > 0 ]]; do
	case $1 in
		-v|--version) echo "version $revision"; exit 0;;
		--aufs) iAUFS=y; shift;;
		--bin-dir=*) [[ -n ${1#*=} ]] && BIN="${1#*=}"; shift;;
		--comp-cmd=*) [[ -n ${1#*=} ]] && CMD="${1#*=}"; shift;;
		-e) E_VERSION=$2; shift 2;;
		--e-version=*) E_VERSION=${1#*=}; shift;;
		--font=*) [[ -n ${1#*=} ]] && FONTS+=",${1#*=}"; shift;;
		-f|--full) iAUFS=y; iGPG=y; iLVM=y, iTOI=y; shift;;
		--mod=*) MOD+=",${1#*=}"; shift;;
		--fsck=*) FSCK+=",${1#*=}"; shift;;
		-g|--gpg) iGPG=y; shift;;
		--prefix=*) PREFIX=${1#*=}; shift;;
		-k) K_VERSION=$2; shift 2;;
		--k-version=*) K_VERSION=${1#*=}; shift;;
		--kmap=*) [[ -n ${1#*=} ]] && KEYMAPS+=",${1#*=}"; shift;;
		--lvm|-l) iLVM=y; shift;;
		--misc-dir=*) [[ -n ${1#*=} ]] && MISC="${1#*=}"; shift;;
		--splash=*) [[ -n ${1#*=} ]] && SPLASHS+=",${1#*=}"; shift;;
		-h|--help|*) usage; exit 0;;
	esac
done

[[ -f ./mkifs-ll.conf ]] && source ./mkifs-ll.conf
: 	${K_VERSION:=$(uname -r)}
[[ -n "$E_VERSION" ]] && E_VERSION=-$E_VERSION
:	${INITRAMFS:=/boot/${PREFIX:-initrd-}$K_VERSION$E_VERSION.cpio.xz}
:	${WORKDIR:=$(pwd)}
:	${MISC:=$WORKDIR/misc}
:	${INITDIR:=${WORKDIR}/${PREFIX:-initrd-ll-}$K_VERSION$E_VERSION}
:	${BIN:=$WORKDIR/bin}
:	${CMD:=xz -9 --check=crc32}

case ${CMD%%\ *} in
	bzip2)	INITRAMFS=${INITRAMFS/.xz/.bz2};;
	gzip) 	INITRAMFS=${INITRAMFS/.xz/.gz};;
	lzma)	INITRAMFS=${INITRAMFS/.xz/.lzma};;
	lzop)	INITRAMFS=${INITRAMFS/.xz/.lzo};;
esac

echo ">>> building $INITRAMFS..."
rm -rf $INITDIR || die "eek!"
mkdir -p $INITDIR && cd $INITDIR || die "eek!"
mkdir -p {,s}bin dev proc root sys usr/{bin,sbin} newroot || die "eek!"
[[ -n "$(uname -a|grep x86_64)" ]] && ARCH=64 || ARCH=32
mkdir -p lib$ARCH/splash/cache etc/{modules,splash} mnt/tok || die "eek!"
ln -sf lib$ARCH lib || die "eek!" && unset ARCH

cp -a /dev/{console,random,urandom,mem,null,tty,tty1,zero} dev/ || addnodes
cp -a $WORKDIR/init . || die "failed to copy init"
cp -a /sbin/{cryptsetup,v86d} sbin/ || die "faied to copy v86d"
cp -a $BIN/busybox bin/ || die "failed to copy busybox"

if [[ -e "$BIN"/applets ]]; then
	cp -a $BIN/applets etc/
	for app in $(< etc/applets); do	
		case ${app%/*} in
			/sbin) cd sbin && ln -s ../bin/busybox ${app##*/} && cd .. || die "eek!";;
			/bin) cd bin && ln -s busybox ${app##*/} && cd .. || die "eek!";;
			*) ln -s bin/busybox .$app || die "eek!";;
		esac
	done
else sed -e 's|#\t/bin/busybox|\t/bin/busybox|' -i init || die "eek!"; fi

[[ -n "$iAUFS" ]] && {
	for fs in {au,squash}fs
	do [ -n "$(echo ${MODULES[2]}|grep $fs)" ] || MODULES[2]+=",$fs"; done
	cp -a /sbin/{,u}mount.aufs sbin/ || die "failed to copy *mount.aufs"
	unset iAUFS
}

[[ -n "$iGPG" ]] && {
	cp -a $BIN/gpg usr/bin/ || die "failed to copy gpg"
	cp -ar $MISC/share usr/ || die "failed to copy $MISC/share"
	cp -ar $MISC/.gnupg . || die "failed to copy $MISC/.gnupg"
	unset iGPG
}

[[ -n "$iLVM" ]] && {
	cp -a /sbin/lvm.static sbin/lvm || die "eek!"
	cd sbin
	for lpv in {vg,pv,lv}{change,create,re{move,name},s{,can}} {lv,vg}reduce lvresize vgmerge
		do ln -s {lvm,$lpv} || die "eek!"
	done
	cd ..
	unset iLVM
}

addmodule() {
	for mod in $@; do
		local module=$(find /lib/modules/$K_VERSION -name $mod.ko -or -name $mod.o)
		if [ -z $module ]; then warn "$mod does not exist"; return 1
		else mkdir -p .${module%/*}
			cp -ar $module .${module%/*} || die "$module copy failed"; fi
	done
}

addmodule ${MODS//,/ }
unset MODS
for key in ${!MODULES[@]}; do
	for grp in ${MODULES[$key]}; do
		[ -n "${grp#*=}" ] && {
			for mod in $(echo ${grp#*=}|tr ',' ' ')
			do addmodule $mod && echo $mod >> etc/modules/${grp%=*}; done; }
	done
done
unset MODULES

[[ -n "$FSCK" ]] && {
	for fs in ${FSCK//,/ }; do
		if [[ -e /sbin/fsck.$fs ]]; then cp -aH /sbin/fsck.$fs sbin/
			if [[ "$(ldd /sbin/fsck.$fs)" != *"not a dynamic executable"* ]]; then
				for lib in $(ldd /sbin/fsck.$fs|sed -e "s:li.*=>\ ::g" -e "s:\ (.*)::g")
				do cp -adH $lib lib/ || die "failed to copy $lib library"; done
			else  info "fsck.$fs is a static binary."; fi
		else warn "fsck.$fs binary doesn't exist"; fi
	done
	unset FSCK
}

[[ -n "$KEYMAPS" ]] && { 
	for keymap in ${KEYMAPS//,/ }
		do [[ -e "$keymap" ]] && cp -a "$keymap" etc/ || warn "failed to copy keymap"; done
	unset KEYMAPS
}

[[ -e "$FONTS" ]] && {  
	for font in ${FONTS//,/ }
		do [[ -e "$font" ]] && cp -a "$font" etc/ || warn "failed to copy $font font"; done
	unset FONTS
}

[[ -n "$SPLASHS" ]] && {
	[[ -n "$iTOI" ]] && {
		cp -a /sbin/tuxoniceui_text sbin/ || die "failed to copy toi helper"
		unset iTOI
	}
	cp -a /sbin/splash_util.static sbin/ || die "failed to copy splash_util.static"
	for splash in ${SPLASHS//,/ }
	do [[ -e "$splash" ]] && cp -ar "$splash" etc/splash/ || warn "failed to copy $splash theme"
	done
	unset SPLASHS
}

find . -print0|cpio --null -ov --format=newc|$CMD > "$INITRAMFS" || die "eek!"

echo ">>> $INITRAMFS initramfs built"

unset K_VERSION E_VERSION INITDIR BIN CMD INITRAMFS MISC
