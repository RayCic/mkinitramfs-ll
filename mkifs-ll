#!/bin/zsh
# $Id: mkinitramfs-ll/mkifs-ll[.zsh],v 0.3.6 2011/10/30 -tclover Exp $
revision=0.3.6_p20111030

usage() {
  cat <<-EOF
  usage: ${(%):-%1x} [OPTIONS...]
      --aufs             add aufs(+squashfs modules +{,u}mount.aufs binaries) support (sqfsd)
  -e, --e-version=<str>  append an extra '<str>' version after \${K_VERSION} to the initramfs
  -k, --k-version=<str>  build an initramfs for '<str>' kernel version, else for \$(uname -r)
      --font=<font>      collon ':' seperated list of fonts in include to the initramfs image
  -f, --full             short forme/hand of '--aufs --lvm --gpg --toi' +use default (values)
      --k-module=<mod>   collon seperated list of kernel module-s to include in the initramfs
      --binary=<bins>    collon seperated list of binary-ies to include in the initramfs
      --bindir=bin       try to include binaries from \${BINDIR} (busybox/applets/gpg) first
      --comp-cmd=cmd     compression command to use to build initramfs, default is 'xz -9..'
  -g, --gpg              adds GnuPG support, require a static gnupg-1.4.x and 'options.skel'
      --prefix=vmlinuz.  prefix scheme to name the initramfs image default is 'initrd-'
      --keymap=kmx86.bin collon seperated list of keymaps to include in the initramfs image
  -l, --lvm              adds LVM2 support, require a static sys-fs/lvm2[lvm.static] binary
      --miscdir=misc     use '.gnupg/gpg.conf,share/gnupg/options.skel' from \$MISCDIR dir,
                         one can add manpages gpg/lvm/cryptsetup in \$MISCDIR/share as well
      --splash=<theme>   collon ':' separated list of splash themes to include in the image
      --toi              adds tuxonice support for splash, require tuxoniceui_text binary
  -u, --usage            print this help/usage and exit
  -v, --version          print version string and exit

  # usage: without an argument, build an initramfs for \$(uname -r) with only LUKS support

  # build with LUKS/GPG/LVM2/AUFS2 support for 3.0.3-git kernel with an extra 'd0' version
  ${(%):-%1x} --e-version=d0 --k-version=3.0.3-git --full
  
  # NOTE: <str>: string; <font>: fonts list; <theme>: theme list; <mod>: kernel modules...
EOF
}

error() { print -P "%B%F{red}*%b%f $@"; }
info()  { print -P "%B%F{green}*%b%f $@"; }
warn()  { print -P "%B%F{red}*%b%f $@"; }
die()   { error $@; exit 1; }
alias die='die "%F{yellow}%1x:%U${(%):-%I}:%u%f" $@'

addnodes() {
	[ -c dev/console ] || mknod dev/console c 5 1 || die "eek!"
	[ -c dev/urandom ] || mknod dev/urandom c 1 9 || die "eek!"
	[ -c dev/random ] || mknod dev/random c 1 8 || die "eek!"
	[ -c dev/mem ] || mknod dev/mem c 1 1 || die "eek!"
	[ -c dev/null ] || mknod dev/null c 1 3 || die "eek!"
	[ -c dev/tty ] || mknod dev/tty c 5 0 || die "eek!"
	[ -c dev/tty1 ] || mknod dev/tty1 c 4 1 || die "eek!"
	[ -c dev/zero ] || mknod dev/zero c 1 5 || die "eek!"
}

[[ $# = 0 ]] && info "initramfs will be build with only LUKS support."

while [[ $# > 0 ]]; do
	case $1 in
		-v|--version) echo "version $revision"; exit 0;;
		--aufs) iAUFS=y; shift;;
		--binary=*) BINARIES+=:${1#*=}; shift;;
		--bindir=*) [[ -n ${1#*=} ]] && BINDIR=${1#*=}; shift;;
		--comp-cmd=*) [[ -n ${1#*=} ]] && COMPCMD=${1#*=}; shift;;
		-e) E_VERSION=$2; shift 2;;
		--e-version=*) E_VERSION=${1#*=}; shift;;
		--font=*) [[ -n ${1#*=} ]] && FONTS+=:${1#*=}; shift;;
		-f|--full) iAUFS=y; iGPG=y; iLVM=y, iTOI=y; shift;;
		--k-module=*) MODDEP+=:${1#*=}; shift;;
		-g|--gpg) iGPG=y; shift;;
		--prefix=*) PREFIX=${1#*=}; shift;; 
		-k) K_VERSION=$2; shift 2;;
		--k-version=*) K_VERSION=${1#*=}; shift;;
		--kmap=*) [[ -n ${1#*=} ]] && KEYMAPS+=:${1#*=}; shift;;
		--lvm|-l) iLVM=y; shift;;
		--miscdir=*) [[ -n ${1#*=} ]] && MISCDIR=${1#*=}; shift;;
		--splash=*) [[ -n ${1#*=} ]] && SPLASHS+=:${1#*=}; shift;;
		--toi) iTOI=y; shift;;
		-u|--usage|*) usage; exit 0;;
	esac
done

typeset -A MODULES
[[ -f ./mkifs-ll.conf ]] && source ./mkifs-ll.conf
: 	${K_VERSION:=$(uname -r)}
[[ -n $E_VERSION ]] && E_VERSION=-$E_VERSION
:	${INITRAMFS:=/boot/${PREFIX:-initrd-}$K_VERSION$E_VERSION.cpio.xz}
:	${WORKDIR:=$(pwd)}
:	${MISCDIR:=$WORKDIR/misc}
:	${INITDIR:=${WORKDIR}/${PREFIX:-initrd-ll-}$K_VERSION$E_VERSION}
:	${BINDIR:=$WORKDIR/bin}
:	${COMPCMD:=xz -9 --check=crc32}

case $=COMPCMD[(w)1] in
	bzip2)	INITRAMFS=${INITRAMFS/.xz/.bz2};;
	gzip) 	INITRAMFS=${INITRAMFS/.xz/.gz};;
	lzma)	INITRAMFS=${INITRAMFS/.xz/.lzma};;
	lzop)	INITRAMFS=${INITRAMFS/.xz/.lzo};;
esac

echo ">>> building $INITRAMFS..."
rm -rf $INITDIR || die "eek!"
mkdir -p $INITDIR && cd $INITDIR || die "eek!"
mkdir -p {,s}bin dev proc root sys usr/{bin,sbin} newroot || die "eek!"
[[ -n ${$(uname -a)[(r)x86_64]} ]] && ARCH=64 || ARCH=32
mkdir -p lib$ARCH/splash/cache etc/{modules,splash} mnt/tok || die "eek!"
ln -sf lib$ARCH lib || die "eek!" && unset ARCH

cp -a /dev/{console,random,urandom,mem,null,tty,tty1,zero} dev/ || addnodes
cp -a $WORKDIR/init . && chmod 775 init || die "failed to copy init"

if [[ -x $BINDIR/busybox ]] { BINARIES+=:bin/busybox
} elif [[ $(which bb) != "bb not found" ]] { 
	cp $(which bb) bin/busybox
	warn "unexpected results may happen using $(which bb)" 
} else { die "no busybox/bb binary found" }
if [[ -e $BINDIR/applets ]] { cp -a $BINDIR/applets etc/
	for app ($(< etc/applets)) 
	case $app:h in
		/sbin) cd sbin && ln -s ../bin/busybox $app:t && cd .. || die "eek!";;
		/bin) cd bin && ln -s busybox $app:t && cd .. || die "eek!";;
		/) ln -s bin/busybox $app:t || die "eek!";;
	esac
} else { sed -e 's|#\t/bin/busybox|\t/bin/busybox|' -i init || die "eek!" }

if [[ -n $iGPG ]] { 
	if [[ -x $BINDIR/gpg ]] { BINARIES+=:usr/bin/gpg
	} elif [[ $($(which gpg) --version|grep 'gpg (GnuPG)'|cut -c13) = 1 ]] {
		BINARIES+=:$(which gpg)
	} else { die "there's no usable gpg/gnupg-1.4.x" }
	cp -r $MISCDIR/share usr/ || die "failed to copy $MISCDIR/share"
	cp -r $MISCDIR/.gnupg . || die "failed to copy $MISCDIR/.gnupg"
	chmod 700 .gnupg; chmod 600 .gnupg/gpg.conf; unset iGPG
}

if [[ -n $iLVM ]] { BINARIES+=:lvm.static
	cd sbin
	for lpv ({vg,pv,lv}{change,create,re{move,name},s{,can}} \
			 {lv,vg}reduce lvresize vgmerge)
		ln -sf lvm $lpv || die "eek!"
	unset iLVM
	cd ..
}

if [[ -n $iAUFS ]] { BINARIES+=:mount.aufs:umount.aufs
	for fs ({au,squash}fs) 
		[[ -n ${${(pws,:,)MODULES[sqfsd]}[(rw)$fs]} ]] || MODULES[sqfsd]+=:$fs
	unset iAUFS
}

setopt EXTENDED_GLOB
setopt NULL_GLOB

addmodule() {
	local ret
	for mod (/lib/modules/$K_VERSION/**/$@.(ko|o))
		if [[ ! -e $mod ]] { warn "$mod does not exist"; let ret+=1; break 
		} else { mkdir -p .$mod:h && cp -ar $mod .$mod:h/ || die "$mod copy failed" }
	return $ret
}

for module (${(pws,:,)MODDEP}) addmodule $module
unset MODDEP
for grp (boot gpg remdev sqfsd tuxonice) 
	if [[ -n ${MODULES[$grp]} ]] {
		for module (${(pws,:,)MODULES[$grp]}) 
			addmodule $module && echo $module >> etc/modules/$grp }
unset MODULES

if [[ -n $KEYMAPS ]] {
	for keymap (${(pws,:,)KEYMAPS}) 
		if [[ -e $keymap ]] { cp -a $keymap etc/ 
		} elif [[ -e $BINDIRDIR/$keymap ]] { cp -a $BINDIR/$keymap etc/
		} else { warn "failed to copy $keymap keymap " }
	unset KEYMAPS
}

if [[ -n $FONTS ]] { 
	for font (${(pws,:,)FONTS})
		if [[ -e $font ]] { cp -a $font etc/
		} elif [[ -e $BINDIR/$font ]] { cp -a $BINDIR/$font etc/ 
		} else { warn "failed to copy $font font" } 
	unset FONTS 
}

if [[ -n $SPLASHS ]] { BINARIES+=:splash_util.static
	[[ -n $iTOI ]] && BINARIES+=:tuxoniceui_text && unset iTOI
	for splash (${(pws,:,)SPLASHS})
		if [[ -e $splash ]] { cp -ar $splash etc/splash/ 
		} elif [[ -e $MISCDIR/$splash ]] { cp -r $MISCDIR/$splash etc/splash/  
		} else { warn "splash themes does not exist" }
	unset SPLASHS
}

bincp() {
	for bin ($@)
	if [[ -x $bin  ]] { 
		cp -aL $bin .${bin/\.static}
		if [[ "$(ldd $bin)" != *"not a dynamic executable" ]] {
			for lib ($(ldd $bin|sed -e "s:li.*=>\ ::g" -e "s:\ (.*)::g"))
				cp -adH $lib lib/ || die "failed to copy $lib library" 
		} else { info "$bin is a static binary." }
	} else {  warn "$bin binary doesn't exist" }
}

for bin (${(pws,:,)BINARIES})
	if [[ -x $BINDIR/${bin##*/} ]] { 
		cp $BINDIR/${bin##*/} ./$bin:h || die "failed to copy $bin"
	} elif [[ -x /$bin ]] { bincp /$bin
	} else { bincp $(which $bin) }

find . -print0|cpio --null -ov --format=newc|${=COMPCMD} >$INITRAMFS || die "eek!"

echo ">>> $INITRAMFS initramfs built"

unset K_VERSION E_VERSION INITDIR BINDIR COMPCMD INITRAMFS MISCDIR

# vim:fenc=utf-8:ci:pi:sts=0:sw=4:ts=4:
