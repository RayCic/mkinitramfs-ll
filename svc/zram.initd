#!/sbin/runscript
#
# $Header: mkinitramfs-ll/svc/zram.initd                 Exp $
# $Author: (c) 2011-2014 -tclover <tokiclover@gmail.com> Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 0.15.1 2014/10/10 12:33:03                   Exp $
#

configfile=/etc/conf.d/${RC_SVCNAME}
description="set up zram devices and initialize zram if necessary"
extra_started_commands="reset"
description_reset="Reset zram devices (WARNING: THIS WILL RESET EVERY DEVICE!)"
:	${devices:=4}

depend()
{
	before bootmisc
}

start()
{
	local arg dev fsys mtpt num=0 opt ret

	for arg in $(sed -nre 's/^device=(.*$)/\1/p' $configfile); do
		dev=/dev/zram$num
		if [ ! -b $dev ]; then
			ewarn "No device available, skipping the rest of device definitions"
			break
		fi
		eval set -- $(echo "$arg" | sed -e 's/:/ /g')
		fsys="$2" mtpt="$3" mopt="$4" mode="$5"
		[ -n "$fsys" ] || continue
		
		if [ "$fsys" = "swap" ]; then
			mkswap $dev > /dev/null 2>&1 &&
			swapon > /dev/null 2>&1
		else
			mkfs -t $fsys $dev >/dev/null 2>&1
			ret=$?
			eend "$ret" "Failed to make $fsys file system to $dev device"

			if test "$ret" = 0 -a -n "$mtpt"; then
				[ -d "$mtpt" ] || mkdir -p $mtpt
				mount -t $fsys ${mopt:+-o $mopt} $dev $mtpt
				eend "$?" "Failed to mount $dev to $mtpt"
				[ -n "$mode" ] && chmod $mode $mtpt
			fi
		fi
		num=$(($num + 1))
	done

	return 0
}

start_pre()
{
	yesno "$initialize" || return 0

	local started=0
	service_started || started=1

	if grep -q zram /proc/modules; then
		if ! rmmod zram >/dev/null 2>&1; then
			reset "$started" && rmmod zram >/dev/null 2>&1 ||
			ewarn "Failed to remove zram kernel module"
		fi
	fi
	if ! modprobe zram num_devices=$devices >/dev/null 2>&1; then
		ewarn "Failed to load zram kernel module, falling back to resetting zram devices"
		reset "$started"
	fi

	case "$compressor" in
		(lz4|lzo)     :;;
		(*) compressor=;;
	esac
	[ -w /sys/block/zram0/comp_algorithm ]   || compressor=
	[ -w /sys/block/zram0/max_comp_streams ] || streams=

	local arg dev num=0 size
	for arg in $(sed -nre 's/^device=(.*$)/\1/p' $configfile); do
		if [ ! -b /dev/zram$num ]; then
			ewarn "No zram free device left"
			break
		fi
		dev=/sys/block/zram$num
		size=${arg%%:*}
		[ -n "$size" ] || continue

		[ -n "$compressor" ] && echo $compressor >$dev/comp_algorithm
		[ -n "$streams" ]    && echo $streams    >$dev/max_comp_streams
		echo $size >$dev/disksize

		num=$(($num + 1))
	done
}

stop()
{
	local arg dev fsys mtpt num=0

	for arg in $(sed -nre 's/^device=(.*$)/\1/p' $configfile); do
		dev=/dev/zram$num
		[ -b $dev ] || break
		eval set -- $(echo "$arg" | sed -e 's/:/ /g')
		fsys="$2" mtpt="$3"
		[ -n "$fsys" ] || continue

		if [ "$fsys" = "swap" ]; then
			swapoff "$dev" > /dev/null 2>&1
		else
			case "$mtpt" in
				(*/run|/tmp) continue;;
				(*) umount -l "$mtpt" > /dev/null 2>&1
					eend "$?" "Failed to umount $mtpt";;
			esac
		fi
		num=$(($num + 1))
	done

	return 0
}

reset()
{
	local dev force=$1 ret=0

	ewarn "Reseting existant zram devices!"
	for dev in /sys/block/zram[0-9]*; do
		if grep -q /dev/${dev##*/} /proc/mounts; then
			if yesno "$force"; then
				umount -l /dev/${dev##*/}
			else
				einfo "$dev zram device is in use, skipping device"
				ret=$(($ret + 1))
				continue
			fi
		fi
		echo 1 > $dev/reset
	done

	return $ret
}

restart()
{
	start
}

#
# vim:fenc=utf-8:ft=gentoo-init-d:ci:pi:sts=0:sw=4:ts=4:
#
