#!/sbin/runscript
# Copyright 1999-2014 Gentoo Foundation
# Distributed under the terms of the simplified 2-clause BSD license
# $Header: mkinitramfs-ll/svc/squashdir-mount.initd,v 1.3 2014/08/08 23:06:10 -tclover Exp $

conf_file="/etc/conf.d/${SVCNAME}"
description="manage (AUFS+squashfs) squashed directories"

depend() {
	after lvm modules
	before consolefont bootmisc acpid keymaps
}

start() {
	local n=/dev/null

	grep -q aufs /proc/filesystems ||
	if ! grep -q aufs /proc/modules; then
	    if ! modprobe aufs >${n} 2>&1; then
	        eend "${?}" "failed to initialize aufs kernel module, exiting"
	        return 0
	    fi
	fi

    grep -q squashfs /proc/filesystems ||
	if ! grep -q squashfs /proc/modules; then
	    if ! modprobe squashfs >${n} 2>&1; then
	        eend "${?}" "failed to initialize squashfs kernel module, exiting"
	        return 0
	    fi
	fi

	local IFS="${IFS}:"
	[[ ${squash_sysdir} ]] && einfo "mounting system wide squashed dirs"
	for dir in ${squash_sysdir}; do 
		squash_mount ${squash_rootdir} ${dir}
	done
	[[ ${squash_localdir}  ]] && einfo "mounting local wide squashed dirs"
	for dir in ${squash_localdir} ${squash_rebuild_dir}; do 
		squash_mount ${squash_rootdir} ${dir}
	done
	return 0
}

stop() {
	if [[ -n "${squash_rebuild_dir}" ]]; then
		eeinfo "sdr: rebuilding ${squash_rebuild_dir} squashed directories"
		if which sdr 1>/dev/null 2>&1; then
			sdr -o0 -nd${squash_rebuild_dir} 1>/dev/null 2>&1
		else
			eerror "sdr: there is not a sdr script in PATH"
		fi
	fi

	[[ ${squash_localdir}  ]] && einfo "umounting local wide squashed dirs"
	local IFS="${IFS}:"
	sync; sync
	for dir in ${squash_localdir}; do
		squash_umount ${dir}
	done

	[[ ${squash_sysdir} ]] && einfo "remounting in ro mode system squashed dirs"
	if [[ "${umount_sysdir}" == "yes" ]]; then
		for dir in ${squashdir_sysdir}; do
			squash_remount ${dir} ro
		done
	fi
	return 0
}

restart() {
	stop
	start
	for dir in ${squashdir_sysdir}; do
		squash_remount ${dir} rw
		eend "${?}" "failed to remount ${dir} in rw mode"
	done
	return 0
}

# @FUNCTION:squash_mount
# @DESCRIPTION: Squashed dir MOUNT
squash_mount() {
	local base=${1}/${dir} n=/dev/null ret
	base=${base//\/\//\/}
	if grep -q aufs:${dir} /proc/mounts; then 
		einfo "squash-ed aufs:${dir} already mounted"
	else
		ebegin "mounting squash-ed ${dir}"
		if grep -q ${base}/rr /proc/mounts; then 
			einfo "squash-ed ${base}.squashfs image already mounted"
		else
			mount -t squashfs ${base}.squashfs ${base}/rr -o loop,ro
			ret=${?}
			eend "${ret}" "failed to mount ${base}.squashfs image"
            [[ ${ret} != 0 ]] && return
       	fi
		mount -t aufs aufs:${dir} ${dir} -o nodev,udba=reval,br:${base}/rw:${base}/rr
		eend "${?}" "failed to mount aufs:${dir}"
	fi
}

# @FUNCTION: squash_umount
# @DESCRIPTION: Squashed dir UMOUNT
squash_umount() {
	local base=${1}/${dir} n=/dev/null no_netdev
	base=${base//\/\//\/}
	[[ "${RC_UNAME}" == "Linux" ]] && no_netdev="-O no_netdev"

	ebegin "umounting squashed ${dir}"
	umount -lt aufs ${dir} ${no_netdev} 1>${n} 2>&1
	eend "${?}" "failed to umount squash-ed aufs:${dir}" || return
	
	umount -lt squashfs ${base}/rr ${no_netdev} 1>${n} 2>&1
	eend "${?}" "failed to umount ${base}.squashfs image"
}

# @FUNCTION: squash_remount
# @DESCRIPTION: Squashed dir RE-MOUNT in ro mode
squash_remount() {
	local opt=${2:-ro}
	ebegin "remounting in read-only mode aufs:${dir}"
	mount -o remount,${opt} aufs:${dir} 1>/dev/null 2>&1
	eend "${?}" "failed to remount aufs:${dir} in read-only mode"
}

# vim:fenc=utf-8:ft=gentoo-init-d:ci:pi:sts=0:sw=4:ts=4:
