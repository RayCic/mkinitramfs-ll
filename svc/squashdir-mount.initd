#!/sbin/runscript
# Copyright 1999-2014 Gentoo Foundation
# Distributed under the terms of the simplified 2-clause BSD license
# $Header: mkinitramfs-ll/svc/squashdir-mount.initd,v 1.2 2014/08/08 23:06:10 -tclover Exp $

conf_file="/etc/conf.d/${SVCNAME}"
description="manage (AUFS+squashfs) squashed directories"

depend() {
	need fsck localmount
	use lvm modules mtab
	after lvm modules
	before consolefont bootmisc acpid keymaps
	keyword -jail -openvz -vserver -lxc
}

start() {
	local IFS="${IFS}:"
	einfo "mounting system wide squashed dirs"
	for dir in ${squash_sysdir}; do 
		squash_mount ${squash_rootdir} ${dir}
	done
	einfo "mounting local wide squashed dirs"
	for dir in ${squashdir_localdir} ${squashdir_rebuild_dir}; do 
		squash_mount ${squash_rootdir} ${dir}
	done
	return 0
}

stop() {
	if [[ -n "${squash_rebuild_dir}" ]]; then
		eeinfo "sdr: rebuilding ${squash_rebuild_dir} squashed directories"
		if which sdr 1>/dev/null 2>&1; then
			sdr -o0 -nd${squash_rebuild_dir} 1>/dev/null 2>&1
		else
			eerror "sdr: there is not a sdr script in PATH"
		fi
	fi

	einfo "umounting local wide squashed dirs"
	local IFS="${IFS}:"
	sync; sync
	for dir in ${squashdir_localdir}; do
		squash_umount ${dir}
	done

	einfo "remounting in ro mode system squashed dirs"
	if [[ "${umount_sysdir}" == "yes" ]]; then
		for dir in ${squashdir_sysdir}; do
			squash_remount ${dir} ro
		done
	fi
	return 0
}

restart() {
	stop
	start
	for dir in ${squashdir_sysdir}; do
		squash_remount ${dir} rw
		eend "${?}" "failed to remount ${dir} in rw mode"
	done
	return 0
}

# @FUNCTION:squash_mount
# @DESCRIPTION: Squashed dir MOUNT
squash_mount() {
	local d=${2} b=${1}/${2} n=/dev/null
	if grep aufs:${d} /proc/mounts 1>${n} 2>&1; then 
		einfo "squash-ed aufs:${d} already mounted"
	else
		ebegin "mounting squash-ed ${d}"
		if grep ${b}/rr /proc/mounts 1>${n} 2>&1; then 
			einfo "squash-ed ${b}.squashfs image already mounted"
		else
			mount -t squashfs ${b}.squashfs ${b}/rr -o nodev,loop,ro 1>${n} 2>&1 &&
       		eend "${?}" "failed to mount ${b}.squashfs image" || return
       	fi
		mount -t aufs aufs:${d} ${d} -o nodev,udba=reval,br:${b}/rw:${b}/rr 1>${n} 2>&1
		eend "${?}" "failed to mount aufs:${d}"
	fi
}

# @FUNCTION: squash_umount
# @DESCRIPTION: Squashed dir UMOUNT
squash_umount() {
	local d=${2} b=${1}/${2} n=/dev/null no_netdev
	[[ "${RC_UNAME}" == "Linux" ]] && no_netdev="-O no_netdev"

	ebegin "umounting squashed ${dir}"
	umount -lt aufs ${d} ${no_netdev} 1>${n} 2>&1
	eend "${?}" "failed to umount squash-ed aufs:${d}" || return
	
	umount -lt squashfs ${b}/rr ${no_netdev} 1>${n} 2>&1
	eend "${?}" "failed to umount ${b}.squashfs image"
}

# @FUNCTION: squash_remount
# @DESCRIPTION: Squashed dir RE-MOUNT in ro mode
squash_remount() {
	local d=${1} o=${2:-ro}
	ebegin "remounting in read-only mode aufs:${d}"
	mount -o remount,${o} aufs:${d} 1>/dev/null 2>&1
	eend "${?}" "failed to remount aufs:${d} in read-only mode"
}

# vim:fenc=utf-8:ft=gentoo-init-d:ci:pi:sts=0:sw=4:ts=4:
