#!/bin/zsh
# $Id: mkinitramfs-ll/sqfsd/sdr[|sqfsd-rebuild][.zsh],v 0.4.1 2011/12/02 -tclover Exp $
revision=0.4.1

usage() {
  cat <<-EOF
  usage: ${(%):-%1x} [-up[|-update]|-rm[|-remove]] [-sqfsdir<dir>] -d[|-sqfsd]<dir>:<dir>

  -r|-sqfsdir<dir>       override default value 'sqfsdir=/sqfsd', if not changed
  -d|-sqfsd<dir>         colon seperated list of directory-ies without the leading '/'
  -a|-arch 32            arch to use for lib\${ach} handling (rc-svcdir and cachedir)
  -f|-fstab              whether to write the necessary mount lines to '/etc/fstab'
  -b|-bsize 131072       use [128k] 131072 bytes block size, which is the default values
  -c|-comp'xz -Xbjc x86' use xz compressor, optionaly, one can append extra arguments...
  -e|-excl<dir>          collon separated list of directories to exlude from .sfs image
  -o|-offset<int>        offset used for rebuilding squashed directories, default is 10%
  -up|-update            update the underlying source directory e.g. bin:sbin:lib32:lib64
  -rm|-remove            remove the underlying source directory e.g. usr:opt:\${PORTDIR}
  -u|-usage              print this help/usage and exit
  -v|-version	         print version string and exit
	
  usages:
  # squash directries which will speed up system and portage, and the underlying files 
  # system will take much less space especially if there are numerous small files.
  ${(%):-%1x} -rm -dvar/db:var/cache/edb
  # [re-]build system related squashed directories and update the sources directories
  ${(%):-%1x} -up -dbin:sbin:lib32:lib64
EOF
}

if [[ $# = 0 ]] { usage; exit 0
} else { zmodload zsh/zutil
	zparseopts -E -D -K -A opts r: sqfsdir: d: sqfsd: a: arch: f fstab b: bsize: \
		c: comp: e: excl: o: offset: up update rm remove u usage v version
	[[ $# != 0 ]] || [[ -n ${(k)opts[-u]} ]] || [[ -n ${(k)opts[-usage]} ]] && usage && exit 0
	[[ -n ${(k)opts[-v]} ]] || [[ -n ${(k)opts[-version]} ]] && \
		print "${(%):-%1x}-$revision" && exit 0
}
:	${opts[-sqfsdir]:=${opts[-r]:-/sqfsd}}
:	${opts[-offset]:=$opts[-o]}
:	${opts[-arch]:=$opts[-a]}
:	${opts[-excl]:=$opts[-e]}
	opts[-sqfsd]+=:$opts[-d]

info() 	{ print -P "%B%F{green}*%b%f $@"; }
error() { print -P "%B%F{red}*%b%f $@"; }
die()   { error $@; exit 1; }
alias die='die "%F{yellow}%1x:%U${(%):-%I}%u:%f" $@'
setopt NULL_GLOB

for dir (${(pws,:,)opts[-sqfsd]}) {
	mkdir -p $opts[-sqfsdir]/$dir/{ro,rw} || die "failed to create $dir/{ro,rw} dirs."
	if [[ -e /sqfsd/$dir.sfs ]] { 
		if [[ ${opts[-offset]:-10} != 0 ]] {
			local ro_size=${$(du -sk $opts[-sqfsdir]/$dir/ro)[1]}
			local rw_size=${$(du -sk $opts[-sqfsdir]/$dir/rw)[1]}
			if (( ($rw_size*100/$ro_size) <= ${opts[-offset]:-10} )) { 
				info "$dir: skiping... there's \`-o' options."; break
			} 
		}
		echo ">>> updating squashed $dir..."
	} else { echo ">>> building squashed $dir..." }
	mksquashfs /$dir $opts[-sqfsdir]/$dir.tmp.sfs -b ${opts[-bsize]:-131072} \
		-comp ${=opts[-comp]:-gzip} ${=opts[-excl]:+-e $opts[-excl]} >/dev/null \
		|| die "failed to build $dir.sfs img."
	if [[ $dir = lib${opts[-arch]:-64} ]] { # move rc-svcdir and cachedir
		mkdir -p /var/{lib/init.d,cache/splash}
		mount --move /$dir/splash/cache /var/cache/splash &>/dev/null \
			|| die "fled to move cachedir."
		mount --move /$dir/rc/init.d /var/lib/init.d &>/dev/null \
			|| die "failed to move rc-svcdir." 
	}
	if [[ -n $(mount -t aufs|grep -w $dir) ]] {
	umount -l /$dir &>/dev/null || die "failed to umount $dir aufs branch." }
	if [[ -n $(mount -t squashfs|grep $opts[-sqfsdir]/$dir/ro) ]] {
		umount -l $opts[-sqfsdir]/$dir/ro &>/dev/null || die "failed to umount sfs img." 
	}
	rm -rf $opts[-sqfsdir]/$dir/rw/* || die "failed to clean up $sqfdir/$dir/rw."
	[[ -e $opts[-sqfsdir]/$dir.sfs ]] && rm -f $opts[-sqfsdir]/$dir.sfs 
	mv $opts[-sqfsdir]/$dir.tmp.sfs $opts[-sqfsdir]/$dir.sfs || \
		die "failed to move $dir.tmp.sfs img."
	if [[ -n ${(k)opts[-fstab]} || -n ${(k)opts[-f]} ]] {
		echo "${opts[-sqfsdir]}/$dir.sfs ${opts[-sqfsdir]}/$dir/ro squashfs nodev,loop,ro 0 0" \
			>> /etc/fstab || die "fstab write failure 1."
		echo "$dir /$dir aufs nodev,udba=reval,br:$opts[-sqfsdir]/$dir/rw:$opts[-sqfsdir]/$dir/ro 0 0" \
			>> /etc/fstab || die "fstab write failure 2." 
	}
	mount -t squashfs $opts[-sqfsdir]/$dir.sfs $opts[-sqfsdir]/$dir/ro -o nodev,loop,ro \
		&>/dev/null || die "failed to mount $dir.sfs img."
	if [[ -n ${(k)opts[-rm]} || -n ${(k)opts[-remove]} ]] { 
		rm -rf /$dir/* || die "failed to clean up $opts[-sqfsdir]/$dir."
	} elif [[ -n ${(k)opts[-up]} || -n ${(k)opts[-update]} ]] { 
		echo >|/tmp/sdr
		cp -aru $opts[-sqfsdir]/$dir/ro/* /$dir/ 2>>|/tmp/sdr || \
		for file ($(sed -e "s|.*\`||g" -e "s|':.*||g" /tmp/sdr)) {
			cp -a $opts[-sqfsdir]/$dir/ro/${file#*/} /tmp/ && \
			mv /tmp/${file##*/} $file:h || info "failed to move $file."
		}
	}
	mount -t aufs $dir /$dir -o nodev,udba=reval,br:${opts[-sqfsdir]}/$dir/rw:$opts[-sqfsdir]/$dir/ro \
		&>/dev/null || die "failed to mount $dir aufs branch."
	if [[ $dir = lib${opts[-arch]:-64} ]] { # move back rc-svcdir and cachedir
		mount --move /var/cache/splash "/$dir/splash/cache" &>/dev/nul \
			|| die "failed to move back cachedir."
		mount --move /var/lib/init.d "/$dir/rc/init.d" &>/dev/null \
			|| die "failed to move back rc-svcdir." }
	echo ">>> ...squashed $dir sucessfully [re]build."
}

unset opts

# vim:fenc=utf-8:ci:pi:sts=0:sw=4:ts=4:
