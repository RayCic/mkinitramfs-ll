#!/bin/sh
# $Header: mkinitramfs-ll/init,v 0.12.8 2013/07/02 21:21:18 -tclover Exp $
#
# WARNING: USE AT YOUR OWN RISK!
# NEED SOME HELP? WHERE'S THE README FILE? YOU ASK? WHO KNOWS.

# @VARIABLE: ECK
# @DEFAUT_SET
# @DESCRIPTION: Environment ChecK, whether or not to check binaries
# and busybox applets

# @VAIABLE: init
# @DEFAULT_SET
# @DESCRIPTION: real init

# @VARIABLE: LIBDIR
# @DEFAULT_SET
# @DESCRIPTION: path to default mkinitramfs-ll library dir

# @VARIABLE: sh
# @DEFAULT_SET
# @DESCRIPTION: shell for scripts and user scripts execution and rescue shell

# @VARIABLE: LOGFILE
# @DEFAULT_SET
# @DESCRIPTION: log file to log execution commands for debugging

# @VARIABLE: LVL
# @DESCRIPTION: auto setted variable, lvl(), to hold the running LeVeL

export init=/sbin/init LIBDIR=/lib/mkinitramfs-ll
export ECK=true LOGFILE=$0.log sh=/bin/sh SPLD=false
export HOME=/root PATH=/sbin:/bin:/usr/bin:/usr/sbin 
export PS1='-(rsh:$(tty | cut -c6-):$PWD)-# ' PS2='-> '

source $LIBDIR/functions || $sh -a

# @FUNCTION: lvl
# @INTERNAL
# @DESCRIPTION: make LeVeL and drop to rescue shell if $LVL = $SHLVL
lvl() {
	msg -i ">>> Switching to init shell run level: $1"
	export LVL=$1

	local _file="$(ls $LIBDIR/${1}-* 2>/dev/null)"
	if [ -n "$_file" ]; then
		for _f in $_file; do
			msg -i "exec: $sh -aex $_f..."
			debug $sh -aex $_f
			if [ -f /run/env ]; then
				while read line; do
					export $line
				done </run/env
				rm -f /run/env
			fi
			[ -f /run/${_s##*/}.pid ] && rm -f /run/${_s##*/}.pid && debug die
			exec 0<$CONSOLE 1>$CONSOLE 2>&1	
		done
	fi

	[ "$SHLVL" = $LVL ] && debug die
	return 0
}

# @VARIABLE: SPLD
# @DEFAULT_SET
# @DESCRIPTION: splash deamon running variable

# @FUNCTION: spld
# @INTERNAL
# @DESCRIPTION: run splash deamon
spld() {
	$ECK && for bin in fbcondecor_helper splash_util; do 
		debug -d bck $bin
	done
	local IFS="${IFS}," _opt _opts cachedir event mode msg theme util
	event="$(grep -Hsi keyboard /sys/class/input/input*/name | \
		sed -e 's#.*input\([0-9]*\)/name.*#event\1#')"
:	${cachedir:=/run/splash/cache}
:	${splu=$(which splash_util)}
:	${BOOT_MSG:="Booting the system (\$progress%)... Press F2 for verbose mode."}
:	${SPLASH_FIFO=$cachedir/.splash}
	export BOOT_MSG cachedir SPLASH_FIFO
	
	for _opt in $splash; do
		case ${_opt%:*} in
			fad*) _opts="set effects $_opt"
				;;
			silent|verbose) mode=$_opt
				;;
			tty) export CONSOLE=/dev/${_opt/:/}
				;;
			theme) theme=${_opt#*:}
				;;
		esac
	done

	[ -d "$cachedir" ] || mkdir -p $cachedir
	debug mkfifo $SPLASH_FIFO
	debug $splu -d -ms -t$theme && SPLD=true
	[ -n "$_opts" ] && debug cmd $_opts
	debug cmd "set event dev /dev/input/$event"
	debug cmd "set autoverbose 0"
	debug ${mode:-verbose}
}

# @FUNCTION: resume
# @INTERNAL
# @USAGE: <[type:]dev[:signature]>
# @DESCRIPTON: resume after a hibernation, TuxOnIce may work,
# the intrnal kernal implementation should be fixed/finished before use
resume() {
	local _asw _dev=$1 _img _hpr
	msg -i "Resuming from hibernation..."

	if [ -d /sys/power/tuxonice ]; then
		if $SPLD; then
			[ -n "$theme" ] &&
				debug ln -sf "/etc/splash/$theme" /etc/splash/tuxonice
			_hpr=$(which tuxoniceui_fbsplash)
		else
			_hpr="$(which tuxoniceui_text)"
		fi
		
		debug _modprobe tuxonice
		echo $_dev >/sys/power/tuxonice/resume

		_img="$(cat /sys/power/tuxonice/image_exists | head -n 1)"
		if [ "$_img" = "1" ]; then 
			msg -e "toi: no recognizable signature at the pointed location"
			msg -e "toi: proceed anyway [ NO | yes ]? "
			shread _asw
			[ "${_asw:-no}" != "yes" ] && die "toi: resume aborted"
		else
			die "toi: no image found at the pointed location"
		fi

		$SPLD && spld_stop

		echo $_hpr >/sys/power/tuxonice/user_interface/program
		echo >/sys/power/tuxonice/do_resume
		echo >/sys/power/tuxonice/image_exists
		debug _rmmod tuxonice
	elif [ -f /sys/power/resume ]; then
		$SPLD && _hpr=$(which suspendui_fbsplash) ||
			_hpr="$(which suspendui_text)"
	
		debug _modprobe swsusp
		echo $_dev >/sys/power/resume
		_img="$(cat /sys/power/image_exists | head -n 1)"
		
		if [ "$_img" = "1" ]; then 
			msg -e "swsusp: no recognizable signature at the pointed location"
			msg -e "swsusp: proceed anyway [ NO | yes ]? "
			shread _asw
			[ "${_asw:-no}" != "yes" ] && die "suspend: resume aborted"
		else
			die "suspend: no image found at the pointed location"
		fi

		$SPLD && spld_stop

		echo disk >/sys/power/state
		debug _rmmod swsusp
	else
		msg -e "no suspend/hibernation support found"
	fi
	
	die "failed to resume from hibernation"
}

# -*- Initialisation -*-

debug -d mkdir -p dev/pts proc run sys newroot mnt/tok
debug -d mount -t proc proc /proc

for arg in $(cat /proc/cmdline); do
   	case $arg in
		rescue*) export SHLVL=1
			;;
		ro|rw) [ -n "$imtop" ] && imtopt="$arg,$imtopt" || imtopt="$arg"
			export imtopt="$imtopt"
			;;
		single) export RUNLVL=2
			;;
		ishrl=*) arg "SHLVL" "$arg" ":" "1"
			arg "RUNLVL" "$arg" ":" "2" "-s"
			;;
		splash*|console*|CONSOLE*) export "$arg"
			;;
   		i[dklmnrs]*) export "$arg"
			;;
	 esac
done

[ -n "$idebug" ] &&
arg "DEBUG" "$idebug" "," "1" &&
arg "DMESG" "$idebug" "," "2" "-s"
[ -n "$DEBUG" ] &&
for _o in $(echo "$DEBUG" | sed 's/:/ /g'); do
	set -$_o
done
[ -n "$DMESG" ] && debug dmesg -n $DMESG

debug -d mount -t sysfs sysfs /sys
debug -d mount -t tmpfs -o mode=755 tmpfs /run
debug -d mkdir -p /run/log

debug umask 0077
debug mv -f $LOGFILE /run/log && export LOGFILE=/run/log/$LOGFILE
$ECK && debug ack

debug _modprobe boot

if grep devtmpfs /proc/filesystems 1>/dev/null 2>&1; then
	debug -d mount -t devtmpfs devtmpfs /dev
else
	debug -d mount -t tmpfs tmpfs /dev
fi

debug mkdir /dev/pts
debug mount -t devpts -o gid=5,mode=0620 devpts /dev/pts

echo >/dev/mdev.seq
debug -d mdev -s
echo /sbin/mdev >/proc/sys/kernel/hotplug
	
if [ -n "$imod" ]; then
	for _m in $(echo $imod | sed 's/:/ /g'); do 
		debug _modprobe $_m 1>/dev/null 2>&1
	done
fi
	
[ -h /dev/fd     ] || debug ln -fs /proc/self/fd   /dev/fd
[ -n /dev/stderr ] || debug ln -fs /proc/self/fd/2 /dev/stderr
[ -n /dev/stdin  ] || debug ln -fs /proc/self/fd/0 /dev/stdin
[ -n /dev/stdout ] || debug ln -fs /proc/self/fd/1 /dev/stdout

:	${CONSOLE:=/dev/console}
[ -n "$(echo $CONSOLE | grep /dev)" ] || CONSOLE="/dev/$CONSOLE"
exec 0<$CONSOLE 1>$CONSOLE 2>&1
export CONSOLE

[ -n "$splash" ] && debug spld

debug _modprobe gpg
debug _modprobe remdev

lvl 1

# -*- Font -*-

arg "FONT" "$ikmap" ":" "2" "-s"
if [ -n "$FONT" ]; then
	[ -f "$_dir/$FONT" ] && debug -d loadfont < "$_dir/$FONT"
fi

# -*- Keymap -*-

arg "KEYMAP" "$ikmap" ":" "1"
if [ -n "$KEYMAP" ]; then
	[ -f "$_dir/$KEYMAP" ] && debug -d loadkmap < "$_dir/$KEYMAP"
fi

# -*- Logo and or boot message -*-

[ -f /etc/issue.logo ] && cat /etc/issue.logo
debug test -f /etc/msg && clear &&
while read _line; do
	msg -i "$_line"
done </etc/msg

# -*- Swap -*-

# @VARIABLE: SWAP
# @DESCRIPTION: this variable should be set if swap is available

if [ -n "$iswap" ]; then
	lvl 2s
	[ -z "$SWAP" ] && debug -d bkd "$iswap" "SWAP" "2" "$ikswap"
fi

# -*- Resume -*-

# @VARIABLE: RESU
# @DESCRIPTION: if resume swap is avalable, this variable should be set

if [ -n "$iresume" ]; then
	if [ -z "$RESU" ] && [ "$iresume" != "swap" ]; then
		debug -d bkd "$iresume" "RESU" "3" "$ikresume"
	fi
	lvl 2r
	[ -z "$RESU" ] && debug resume "${RESU:-$SWAP}"
fi

# -*- Root -*-

lvl 3d

# @VARIABLE: ROOT
# @DESCRIPTION: if rootfs is mounted, this variable should be set

if [ -z "$ROOT" ]; then
	arg "CK" "$iroot" ":" "2" "-s"
	arg "FS" "$iroot" ":" "3" "-s"
	debug -d bkd "$iroot" "ROOT" "1" "$ikroot"

	lvl 3f
	if [ -n "$CK" ]; then 
		case $CK in
			n*|N*) CK=-e
				;;
			c*|y*|Y*) CK=-d
				;;
			*) CK=
				;;
		esac
		debug $CK fsck ${FS:+-t$FS} $ROOT
	fi

	lvl 3m
	if ! debug mount ${imopt:+-o$imopt} ${FS:+-t$FS} $ROOT /newroot; then
		[ "$KEYMODE" != "none" ] && debug -d dmclose "${ROOT##*/}"
		die "failed to mount rootfs"
	fi
fi

[ -n "$isqfsd" ] && lvl 3s && debug -d squashd

# -*- Clean up and switch -*-

lvl 4c

[ -n "$LBK" ] &&
for _k in $(echo $LBK | sed '/:/ /g'); do
	debug dmclose "$_k"
done
[ -n "$LBD" ] &&
for _d in $(echo $LBD | sed 's/:/ /g'); do
	debug losetup -d $_d
done

[ -n "$imount" ] && lvl 4m && debug mnt

debug _rmmod gpg
debug -d umount -f -l /mnt/tok
debug _rmmod remdev

echo >/proc/sys/kernel/hotplug
msg -i "Switching / ..."
debug spld_stop
sleep 1

lvl 4u
debug -d umount -l /proc
debug -d umount -l /sys
debug -d umount -l /dev/pts
debug -d umount -l /dev
debug mv $LOGFILE /
export LOGFILE=/$0.log
debug -d umount -l /run
lvl 4s

debug -d exec switch_root /newroot ${init:-/sbin/init} $RUNLVL

# vim:fenc=utf-8:ft=sh:ci:pi:sts=0:sw=4:ts=4:
